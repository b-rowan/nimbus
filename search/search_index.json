{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p><code>nimbus</code> is a standardized ASIC miner API, designed to make communicating with and controlling ASIC miners simpler.</p> <p>Commands are designed to be in a CGMiner style format, containing both a <code>\"STATUS\"</code> section and the result of the command.</p> <p>The following documentation contains examples on how to communicate with the <code>nimbus</code> API both via web requests and raw sockets.</p>"},{"location":"common/","title":"Common","text":""},{"location":"common/#output-aliases","title":"Output Aliases","text":""},{"location":"common/#nimbus.util.serialize.to_cgminer","title":"to_cgminer","text":"<pre><code>to_cgminer(snake: str) -&gt; str\n</code></pre> <p>Generate CGMiner style output aliases.</p> <p>These aliases have each word capitalized and are separated by spaces.</p> <p>Parameters:</p> Name Type Description Default <code>snake</code> <code>str</code> <p>The python or snake case name of the attribute.</p> required Source code in <code>nimbus/util/serialize.py</code> <pre><code>def to_cgminer(snake: str) -&gt; str:\n    \"\"\"\n    Generate CGMiner style output aliases.\n\n    These aliases have each word capitalized and are separated by spaces.\n\n    Args:\n        snake: The python or snake case name of the attribute.\n    \"\"\"\n\n    return snake.title().replace(\"_\", \" \")\n</code></pre>"},{"location":"common/#nimbus.util.serialize.to_upper","title":"to_upper","text":"<pre><code>to_upper(snake: str) -&gt; str\n</code></pre> <p>Generate uppercased output aliases.</p> <p>Parameters:</p> Name Type Description Default <code>snake</code> <code>str</code> <p>The python or snake case name of the attribute.</p> required Source code in <code>nimbus/util/serialize.py</code> <pre><code>def to_upper(snake: str) -&gt; str:\n    \"\"\"\n    Generate uppercased output aliases.\n\n    Args:\n        snake: The python or snake case name of the attribute.\n    \"\"\"\n\n    return snake.upper()\n</code></pre>"},{"location":"common/#messages","title":"Messages","text":""},{"location":"common/#nimbus.responses.common.NimbusMinerMessageSeverity","title":"NimbusMinerMessageSeverity","text":"<p>               Bases: <code>StrEnum</code></p> <p>CGMiner compatible status code.</p> <p>Attributes:</p> Name Type Description <code>ERROR</code> <p>Error message, used to inform the user of some state which is causing a noticeable effect.</p> <code>FATAL</code> <p>Fatal message, used to inform the user of some state which will prevent mining altogether.</p> <code>INFO</code> <p>Information message, used to inform the user of some state which is not having a noticeable effect.</p> <code>WARNING</code> <p>Warning message, used to inform the user of some state which may cause a noticeable effect.</p> Source code in <code>nimbus/responses/common.py</code> <pre><code>class NimbusMinerMessageSeverity(StrEnum):\n    \"\"\"\n    CGMiner compatible status code.\n    \"\"\"\n\n    FATAL = \"Fatal\"\n    \"\"\"\n    Fatal message, used to inform the user of some state which will prevent mining altogether.\n    \"\"\"\n    ERROR = \"Error\"\n    \"\"\"\n    Error message, used to inform the user of some state which is causing a noticeable effect.\n    \"\"\"\n    WARNING = \"Warning\"\n    \"\"\"\n    Warning message, used to inform the user of some state which may cause a noticeable effect.\n    \"\"\"\n    INFO = \"Info\"\n    \"\"\"\n    Information message, used to inform the user of some state which is not having a noticeable effect.\n    \"\"\"\n</code></pre>"},{"location":"common/#nimbus.responses.common.NimbusMinerMessageSeverity.ERROR","title":"ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR = 'Error'\n</code></pre> <p>Error message, used to inform the user of some state which is causing a noticeable effect.</p>"},{"location":"common/#nimbus.responses.common.NimbusMinerMessageSeverity.FATAL","title":"FATAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FATAL = 'Fatal'\n</code></pre> <p>Fatal message, used to inform the user of some state which will prevent mining altogether.</p>"},{"location":"common/#nimbus.responses.common.NimbusMinerMessageSeverity.INFO","title":"INFO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFO = 'Info'\n</code></pre> <p>Information message, used to inform the user of some state which is not having a noticeable effect.</p>"},{"location":"common/#nimbus.responses.common.NimbusMinerMessageSeverity.WARNING","title":"WARNING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WARNING = 'Warning'\n</code></pre> <p>Warning message, used to inform the user of some state which may cause a noticeable effect.</p>"},{"location":"common/#nimbus.responses.common.NimbusMinerMessage","title":"NimbusMinerMessage  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Miner messages, representing different state information.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusMinerMessageSeverity\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"Fatal\",\n        \"Error\",\n        \"Warning\",\n        \"Info\"\n      ],\n      \"title\": \"NimbusMinerMessageSeverity\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Miner messages, representing different state information.\",\n  \"properties\": {\n    \"When\": {\n      \"format\": \"date-time\",\n      \"title\": \"When\",\n      \"type\": \"string\"\n    },\n    \"Code\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Code\"\n    },\n    \"Message\": {\n      \"title\": \"Message\",\n      \"type\": \"string\"\n    },\n    \"Severity\": {\n      \"$ref\": \"#/$defs/NimbusMinerMessageSeverity\"\n    }\n  },\n  \"required\": [\n    \"When\",\n    \"Message\",\n    \"Severity\"\n  ],\n  \"title\": \"NimbusMinerMessage\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>when</code>                 (<code>datetime</code>)             </li> <li> <code>code</code>                 (<code>int | None</code>)             </li> <li> <code>message</code>                 (<code>str</code>)             </li> <li> <code>severity</code>                 (<code>NimbusMinerMessageSeverity</code>)             </li> </ul> Source code in <code>nimbus/responses/common.py</code> <pre><code>class NimbusMinerMessage(BaseModel):\n    \"\"\"\n    Miner messages, representing different state information.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    when: Annotated[datetime, BeforeValidator(parse_unix_timestamp)]\n    \"\"\"\n    When the message was initiated, as a UNIX timestamp in seconds.\n    \"\"\"\n    code: int | None = None\n    \"\"\"\n    A numerical code representing this specific error.\n    This value may be set to `None` if there is no applicable code.\n    \"\"\"\n    message: str\n    \"\"\"\n    The message describing the state information.\n    \"\"\"\n    severity: NimbusMinerMessageSeverity\n    \"\"\"\n    The severity of the message.\n    \"\"\"\n\n    @field_serializer(\"when\")\n    def serialize_when(self, when: datetime, _info) -&gt; int:\n        return int(when.timestamp())\n</code></pre>"},{"location":"common/#nimbus.responses.common.NimbusMinerMessage.code","title":"code  <code>pydantic-field</code>","text":"<pre><code>code: int | None = None\n</code></pre> <p>A numerical code representing this specific error. This value may be set to <code>None</code> if there is no applicable code.</p>"},{"location":"common/#nimbus.responses.common.NimbusMinerMessage.message","title":"message  <code>pydantic-field</code>","text":"<pre><code>message: str\n</code></pre> <p>The message describing the state information.</p>"},{"location":"common/#nimbus.responses.common.NimbusMinerMessage.severity","title":"severity  <code>pydantic-field</code>","text":"<pre><code>severity: NimbusMinerMessageSeverity\n</code></pre> <p>The severity of the message.</p>"},{"location":"common/#nimbus.responses.common.NimbusMinerMessage.when","title":"when  <code>pydantic-field</code>","text":"<pre><code>when: datetime\n</code></pre> <p>When the message was initiated, as a UNIX timestamp in seconds.</p>"},{"location":"common/#response-models","title":"Response Models","text":""},{"location":"common/#nimbus.responses.base.NimbusCommandStatus","title":"NimbusCommandStatus  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>CGMiner compatible status information.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"CGMiner compatible status information.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"$ref\": \"#/$defs/NimbusStatusCode\"\n    },\n    \"When\": {\n      \"format\": \"date-time\",\n      \"title\": \"When\",\n      \"type\": \"string\"\n    },\n    \"Code\": {\n      \"default\": 1,\n      \"title\": \"Code\",\n      \"type\": \"integer\"\n    },\n    \"Msg\": {\n      \"title\": \"Msg\",\n      \"type\": \"string\"\n    },\n    \"Description\": {\n      \"title\": \"Description\",\n      \"type\": \"string\"\n    },\n    \"Protocol\": {\n      \"default\": \"nimbus v0.1.0\",\n      \"title\": \"Protocol\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"Msg\",\n    \"Description\"\n  ],\n  \"title\": \"NimbusCommandStatus\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>NimbusStatusCode</code>)             </li> <li> <code>when</code>                 (<code>datetime</code>)             </li> <li> <code>code</code>                 (<code>int</code>)             </li> <li> <code>msg</code>                 (<code>str</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>protocol</code>                 (<code>str</code>)             </li> </ul> Source code in <code>nimbus/responses/base.py</code> <pre><code>class NimbusCommandStatus(BaseModel):\n    \"\"\"\n    CGMiner compatible status information.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    status: NimbusStatusCode = Field(alias=\"STATUS\")\n    \"\"\"\n    The status of the command.\n    \"\"\"\n    when: Annotated[datetime, BeforeValidator(parse_unix_timestamp)] = Field(default_factory=lambda: datetime.now(UTC))\n    \"\"\"\n    UNIX timestamp in seconds.\n    \"\"\"\n    code: int = 1\n    \"\"\"\n    A status code for the command.\n    This value is not used as part of the schema defined by `nimbus`, but is left in for CGMiner compatibility, and so defaults to 1.\n    \"\"\"\n    msg: str\n    \"\"\"\n    A message for the command.\n    This value is not strictly defined by `nimbus`, but should be a short user readable message explaining the result of the command.\n    \"\"\"\n    description: str\n    \"\"\"\n    A description to accompany the command.\n    This value is nearly always used to hold the miner process version, such as `cgminer v1.0.0`.\n    \"\"\"\n    protocol: str = f\"nimbus v{version('nimbus')}\"\n    \"\"\"\n    The protocol and version being used by this device.\n    Defaults to `nimbus v{version}`, but may be set to an alternate protocol if desired.\n    For custom protocols which fully implement a version of `nimbus` and only add functionality, this should be suffixed, such as `nimbus v{version}.cgminer-1`\n    \"\"\"\n\n    @field_serializer(\"when\")\n    def serialize_when(self, when: datetime, _info) -&gt; int:\n        return int(when.timestamp())\n</code></pre>"},{"location":"common/#nimbus.responses.base.NimbusCommandStatus.code","title":"code  <code>pydantic-field</code>","text":"<pre><code>code: int = 1\n</code></pre> <p>A status code for the command. This value is not used as part of the schema defined by <code>nimbus</code>, but is left in for CGMiner compatibility, and so defaults to 1.</p>"},{"location":"common/#nimbus.responses.base.NimbusCommandStatus.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre> <p>A description to accompany the command. This value is nearly always used to hold the miner process version, such as <code>cgminer v1.0.0</code>.</p>"},{"location":"common/#nimbus.responses.base.NimbusCommandStatus.msg","title":"msg  <code>pydantic-field</code>","text":"<pre><code>msg: str\n</code></pre> <p>A message for the command. This value is not strictly defined by <code>nimbus</code>, but should be a short user readable message explaining the result of the command.</p>"},{"location":"common/#nimbus.responses.base.NimbusCommandStatus.protocol","title":"protocol  <code>pydantic-field</code>","text":"<pre><code>protocol: str = f'nimbus v{version('nimbus')}'\n</code></pre> <p>The protocol and version being used by this device. Defaults to <code>nimbus v{version}</code>, but may be set to an alternate protocol if desired. For custom protocols which fully implement a version of <code>nimbus</code> and only add functionality, this should be suffixed, such as <code>nimbus v{version}.cgminer-1</code></p>"},{"location":"common/#nimbus.responses.base.NimbusCommandStatus.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: NimbusStatusCode\n</code></pre> <p>The status of the command.</p>"},{"location":"common/#nimbus.responses.base.NimbusCommandStatus.when","title":"when  <code>pydantic-field</code>","text":"<pre><code>when: datetime\n</code></pre> <p>UNIX timestamp in seconds.</p>"},{"location":"common/#nimbus.responses.base.NimbusStatusCode","title":"NimbusStatusCode","text":"<p>               Bases: <code>Enum</code></p> <p>CGMiner compatible status code.</p> <p>Attributes:</p> Name Type Description <code>ERROR</code> <p>Error message, should be used when something went wrong when modifying the state of the device (write).</p> <code>FATAL</code> <p>Fatal message, should be used to indicate an internal error on the device which was unexpected.</p> <code>INFO</code> <p>Information message, should be used for commands which do not modify the state of the device (read-only).  Treated as a success.</p> <code>SUCCESS</code> <p>Success message, should be used for commands which modify the state of the device (write).</p> <code>WARNING</code> <p>Warning message, should be used for commands which do not modify the state of the device (read-only).  Should also be used to indicate an invalid command.</p> Source code in <code>nimbus/responses/base.py</code> <pre><code>class NimbusStatusCode(Enum):\n    \"\"\"\n    CGMiner compatible status code.\n    \"\"\"\n\n    INFO = \"I\"\n    \"\"\"\n    Information message, should be used for commands which do not modify the state of the device (read-only).  Treated as a success.\n    \"\"\"\n    WARNING = \"W\"\n    \"\"\"\n    Warning message, should be used for commands which do not modify the state of the device (read-only).  Should also be used to indicate an invalid command.\n    \"\"\"\n    SUCCESS = \"S\"\n    \"\"\"\n    Success message, should be used for commands which modify the state of the device (write).\n    \"\"\"\n    ERROR = \"E\"\n    \"\"\"\n    Error message, should be used when something went wrong when modifying the state of the device (write).\n    \"\"\"\n    FATAL = \"F\"\n    \"\"\"\n    Fatal message, should be used to indicate an internal error on the device which was unexpected.\n    \"\"\"\n</code></pre>"},{"location":"common/#nimbus.responses.base.NimbusStatusCode.ERROR","title":"ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR = 'E'\n</code></pre> <p>Error message, should be used when something went wrong when modifying the state of the device (write).</p>"},{"location":"common/#nimbus.responses.base.NimbusStatusCode.FATAL","title":"FATAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FATAL = 'F'\n</code></pre> <p>Fatal message, should be used to indicate an internal error on the device which was unexpected.</p>"},{"location":"common/#nimbus.responses.base.NimbusStatusCode.INFO","title":"INFO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFO = 'I'\n</code></pre> <p>Information message, should be used for commands which do not modify the state of the device (read-only).  Treated as a success.</p>"},{"location":"common/#nimbus.responses.base.NimbusStatusCode.SUCCESS","title":"SUCCESS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SUCCESS = 'S'\n</code></pre> <p>Success message, should be used for commands which modify the state of the device (write).</p>"},{"location":"common/#nimbus.responses.base.NimbusStatusCode.WARNING","title":"WARNING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WARNING = 'W'\n</code></pre> <p>Warning message, should be used for commands which do not modify the state of the device (read-only).  Should also be used to indicate an invalid command.</p>"},{"location":"common/#nimbus.responses.base.NimbusBaseCommandResult","title":"NimbusBaseCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>CGMiner compatible base response.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"CGMiner compatible base response.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\"\n  ],\n  \"title\": \"NimbusBaseCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> </ul> Source code in <code>nimbus/responses/base.py</code> <pre><code>class NimbusBaseCommandResult(BaseModel):\n    \"\"\"\n    CGMiner compatible base response.\n    \"\"\"\n\n    model_config = ConfigDict(alias_generator=to_upper, populate_by_name=True)\n\n    status: list[NimbusCommandStatus]\n    \"\"\"\n    A status result for the command being sent.  CGMiner compatible.\n    \"\"\"\n</code></pre>"},{"location":"common/#nimbus.responses.base.NimbusBaseCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"devdetails/","title":"Devdetails","text":""},{"location":"devdetails/#example","title":"Example","text":""},{"location":"devdetails/#request","title":"Request","text":"<p>GET request</p> <pre><code>/nimbus/v0/devdetails\n</code></pre> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/devdetails\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/devdetails\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>CGMiner style command</p> <pre><code>{'command': 'devdetails'}\n</code></pre> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"devdetails\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"devdetails\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre>"},{"location":"devdetails/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"I\",\n            \"When\": 1751301513,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"devdetails\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"DEVDETAILS\": [\n        {\n            \"ID\": 0,\n            \"Chips\": 63,\n            \"Cores\": 7182,\n            \"Driver\": \"nimbus v0.1.0\",\n            \"Kernel\": null,\n            \"Model\": \"Nimbus ExampleMiner\",\n            \"Working Chips\": 63,\n            \"Expected Hashrate\": 4.5,\n            \"Serial Number\": \"NIMBOARDTEST123\",\n            \"Voltage\": 12.5,\n            \"Frequency\": 400.0,\n            \"Wattage\": 350,\n            \"Wattage Limit\": 350,\n            \"MHS 1m\": 4.5,\n            \"MHS 5m\": 4.5,\n            \"MHS 15m\": 4.5,\n            \"Active\": true,\n            \"PCB Temperature\": 60.0,\n            \"Intake Temperature\": 65.0,\n            \"Outlet Temperature\": 85.0,\n            \"Tuned\": true,\n            \"DEVDETAILS\": 0\n        },\n        {\n            \"ID\": 1,\n            \"Chips\": 63,\n            \"Cores\": 7182,\n            \"Driver\": \"nimbus v0.1.0\",\n            \"Kernel\": null,\n            \"Model\": \"Nimbus ExampleMiner\",\n            \"Working Chips\": 63,\n            \"Expected Hashrate\": 4.5,\n            \"Serial Number\": \"NIMBOARDTEST123\",\n            \"Voltage\": 12.5,\n            \"Frequency\": 400.0,\n            \"Wattage\": 350,\n            \"Wattage Limit\": 350,\n            \"MHS 1m\": 4.5,\n            \"MHS 5m\": 4.5,\n            \"MHS 15m\": 4.5,\n            \"Active\": true,\n            \"PCB Temperature\": 60.0,\n            \"Intake Temperature\": 65.0,\n            \"Outlet Temperature\": 85.0,\n            \"Tuned\": true,\n            \"DEVDETAILS\": 1\n        },\n        {\n            \"ID\": 2,\n            \"Chips\": 63,\n            \"Cores\": 7182,\n            \"Driver\": \"nimbus v0.1.0\",\n            \"Kernel\": null,\n            \"Model\": \"Nimbus ExampleMiner\",\n            \"Working Chips\": 63,\n            \"Expected Hashrate\": 4.5,\n            \"Serial Number\": \"NIMBOARDTEST123\",\n            \"Voltage\": 12.5,\n            \"Frequency\": 400.0,\n            \"Wattage\": 350,\n            \"Wattage Limit\": 350,\n            \"MHS 1m\": 4.5,\n            \"MHS 5m\": 4.5,\n            \"MHS 15m\": 4.5,\n            \"Active\": true,\n            \"PCB Temperature\": 60.0,\n            \"Intake Temperature\": 65.0,\n            \"Outlet Temperature\": 85.0,\n            \"Tuned\": true,\n            \"DEVDETAILS\": 2\n        }\n    ]\n}\n</code></pre>"},{"location":"devdetails/#response-models","title":"Response Models","text":""},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult","title":"NimbusDeviceDetailResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>CGMiner compatible device details.</p> Show JSON schema: <pre><code>{\n  \"description\": \"CGMiner compatible device details.\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"integer\"\n    },\n    \"Chips\": {\n      \"title\": \"Chips\",\n      \"type\": \"integer\"\n    },\n    \"Cores\": {\n      \"title\": \"Cores\",\n      \"type\": \"integer\"\n    },\n    \"Driver\": {\n      \"title\": \"Driver\",\n      \"type\": \"string\"\n    },\n    \"Kernel\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Kernel\"\n    },\n    \"Model\": {\n      \"title\": \"Model\",\n      \"type\": \"string\"\n    },\n    \"Working Chips\": {\n      \"title\": \"Working Chips\",\n      \"type\": \"integer\"\n    },\n    \"Expected Hashrate\": {\n      \"title\": \"Expected Hashrate\",\n      \"type\": \"number\"\n    },\n    \"Serial Number\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Serial Number\"\n    },\n    \"Voltage\": {\n      \"title\": \"Voltage\",\n      \"type\": \"number\"\n    },\n    \"Frequency\": {\n      \"title\": \"Frequency\",\n      \"type\": \"number\"\n    },\n    \"Wattage\": {\n      \"title\": \"Wattage\",\n      \"type\": \"integer\"\n    },\n    \"Wattage Limit\": {\n      \"title\": \"Wattage Limit\",\n      \"type\": \"integer\"\n    },\n    \"mhs_1m\": {\n      \"title\": \"Mhs 1M\",\n      \"type\": \"number\"\n    },\n    \"mhs_5m\": {\n      \"title\": \"Mhs 5M\",\n      \"type\": \"number\"\n    },\n    \"mhs_15m\": {\n      \"title\": \"Mhs 15M\",\n      \"type\": \"number\"\n    },\n    \"Active\": {\n      \"title\": \"Active\",\n      \"type\": \"boolean\"\n    },\n    \"pcb_temperature\": {\n      \"title\": \"Pcb Temperature\",\n      \"type\": \"number\"\n    },\n    \"Intake Temperature\": {\n      \"title\": \"Intake Temperature\",\n      \"type\": \"number\"\n    },\n    \"Outlet Temperature\": {\n      \"title\": \"Outlet Temperature\",\n      \"type\": \"number\"\n    },\n    \"Tuned\": {\n      \"title\": \"Tuned\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"Chips\",\n    \"Cores\",\n    \"Driver\",\n    \"Model\",\n    \"Working Chips\",\n    \"Expected Hashrate\",\n    \"Voltage\",\n    \"Frequency\",\n    \"Wattage\",\n    \"Wattage Limit\",\n    \"mhs_1m\",\n    \"mhs_5m\",\n    \"mhs_15m\",\n    \"Active\",\n    \"pcb_temperature\",\n    \"Intake Temperature\",\n    \"Outlet Temperature\",\n    \"Tuned\"\n  ],\n  \"title\": \"NimbusDeviceDetailResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>chips</code>                 (<code>int</code>)             </li> <li> <code>cores</code>                 (<code>int</code>)             </li> <li> <code>driver</code>                 (<code>str</code>)             </li> <li> <code>kernel</code>                 (<code>str | None</code>)             </li> <li> <code>model</code>                 (<code>str</code>)             </li> <li> <code>working_chips</code>                 (<code>int</code>)             </li> <li> <code>expected_hashrate</code>                 (<code>float</code>)             </li> <li> <code>serial_number</code>                 (<code>str | None</code>)             </li> <li> <code>voltage</code>                 (<code>float</code>)             </li> <li> <code>frequency</code>                 (<code>float</code>)             </li> <li> <code>wattage</code>                 (<code>int</code>)             </li> <li> <code>wattage_limit</code>                 (<code>int</code>)             </li> <li> <code>mhs_1m</code>                 (<code>float</code>)             </li> <li> <code>mhs_5m</code>                 (<code>float</code>)             </li> <li> <code>mhs_15m</code>                 (<code>float</code>)             </li> <li> <code>active</code>                 (<code>bool</code>)             </li> <li> <code>pcb_temperature</code>                 (<code>float</code>)             </li> <li> <code>intake_temperature</code>                 (<code>float</code>)             </li> <li> <code>outlet_temperature</code>                 (<code>float</code>)             </li> <li> <code>tuned</code>                 (<code>bool</code>)             </li> </ul> Source code in <code>nimbus/responses/devdetails.py</code> <pre><code>class NimbusDeviceDetailResult(BaseModel):\n    \"\"\"\n    CGMiner compatible device details.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    id: int = Field(\n        serialization_alias=\"ID\",\n        validation_alias=AliasChoices(\"id\", \"ID\"),\n    )\n    \"\"\"\n    The board ID, indexed from 0.\n    For example, for an S9 with connectors labeled 6/7/8, 6 is 0, 7 is 1, and 8 is 2.\n    \"\"\"\n    chips: int\n    \"\"\"\n    The number of chips on this board.\n    \"\"\"\n    cores: int\n    \"\"\"\n    The total number of cores across all chips.\n    \"\"\"\n    driver: str\n    \"\"\"\n    The driver being used for this board.\n    This value should be the same as the name of the mining process, for CGMiner this would be set to `\"cgminer\"`\n    \"\"\"\n    kernel: str | None = None\n    \"\"\"\n    The name and version number of the kernel being used.\n    This value is arbitrary, and will likely not be used by the end user.\n    \"\"\"\n    model: str\n    \"\"\"\n    The model of the device this board is attached to.\n    This value must match the `type` value of the [version command][nimbus.responses.version.NimbusVersionResult].\n    \"\"\"\n    working_chips: int\n    \"\"\"\n    The number of working chips on this board.\n    \"\"\"\n    expected_hashrate: float\n    \"\"\"\n    The expected hashrate of the board.\n    \"\"\"\n    serial_number: str | None = None\n    \"\"\"\n    The serial number of the board if applicable.\n    \"\"\"\n    voltage: float\n    \"\"\"\n    The voltage of the board, in volts.\n    \"\"\"\n    frequency: float\n    \"\"\"\n    The clock speed of the board, in MHz.\n    \"\"\"\n    wattage: int\n    \"\"\"\n    The total power draw of the board in watts.\n    \"\"\"\n    wattage_limit: int\n    \"\"\"\n    The maximum power draw of the board.\n    \"\"\"\n    mhs_1m: float = Field(\n        serialization_alias=\"MHS 1m\",\n        validation_alias=AliasChoices(\"mhs_1m\", \"MHS 1m\"),\n    )\n    \"\"\"\n    The average hashrate of the board in MH/s since 1 minute ago.\n    This should be used as the \"real hashrate\" of the board by the end user.\n    \"\"\"\n    mhs_5m: float = Field(\n        serialization_alias=\"MHS 5m\",\n        validation_alias=AliasChoices(\"mhs_5m\", \"MHS 5m\"),\n    )\n    \"\"\"\n    The average hashrate of the board in MH/s since 5 minutes ago.\n    \"\"\"\n    mhs_15m: float = Field(\n        serialization_alias=\"MHS 15m\",\n        validation_alias=AliasChoices(\"mhs_15m\", \"MHS 15m\"),\n    )\n    \"\"\"\n    The average hashrate of the board in MH/s since 15 minutes ago.\n    \"\"\"\n    active: bool\n    \"\"\"\n    Whether the board is active.\n    \"\"\"\n    pcb_temperature: float = Field(\n        serialization_alias=\"PCB Temperature\",\n        validation_alias=AliasChoices(\"pcb_temperature\", \"PCB Temperature\"),\n    )\n    \"\"\"\n    The PCB temperature of the board.\n    \"\"\"\n    intake_temperature: float\n    \"\"\"\n    The intake temperature of the board.\n    This is usually sourced from the first sensor on the board.\n    \"\"\"\n    outlet_temperature: float\n    \"\"\"\n    The outlet temperature of the board.\n    This is usually sourced from the last sensor on the board.\n    \"\"\"\n    tuned: bool\n    \"\"\"\n    Whether this board is fully tuned.\n    The meaning of this field is very implementation specific, but should be used to indicate that the board is currently at \"nominal\".\n    \"\"\"\n\n    @computed_field(alias=\"DEVDETAILS\")\n    @property\n    def devdetails(self) -&gt; int:\n        \"\"\"\n        The same value as ID, just included for CGMiner compatibility.\n        Technically this could be different from ID in the original CGMiner code, but modern requirements make using 0 indexed values more useful.\n        \"\"\"\n        return self.id\n</code></pre>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.active","title":"active  <code>pydantic-field</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether the board is active.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.chips","title":"chips  <code>pydantic-field</code>","text":"<pre><code>chips: int\n</code></pre> <p>The number of chips on this board.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.cores","title":"cores  <code>pydantic-field</code>","text":"<pre><code>cores: int\n</code></pre> <p>The total number of cores across all chips.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.devdetails","title":"devdetails  <code>property</code>","text":"<pre><code>devdetails: int\n</code></pre> <p>The same value as ID, just included for CGMiner compatibility. Technically this could be different from ID in the original CGMiner code, but modern requirements make using 0 indexed values more useful.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.driver","title":"driver  <code>pydantic-field</code>","text":"<pre><code>driver: str\n</code></pre> <p>The driver being used for this board. This value should be the same as the name of the mining process, for CGMiner this would be set to <code>\"cgminer\"</code></p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.expected_hashrate","title":"expected_hashrate  <code>pydantic-field</code>","text":"<pre><code>expected_hashrate: float\n</code></pre> <p>The expected hashrate of the board.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.frequency","title":"frequency  <code>pydantic-field</code>","text":"<pre><code>frequency: float\n</code></pre> <p>The clock speed of the board, in MHz.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre> <p>The board ID, indexed from 0. For example, for an S9 with connectors labeled 6/7/8, 6 is 0, 7 is 1, and 8 is 2.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.intake_temperature","title":"intake_temperature  <code>pydantic-field</code>","text":"<pre><code>intake_temperature: float\n</code></pre> <p>The intake temperature of the board. This is usually sourced from the first sensor on the board.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.kernel","title":"kernel  <code>pydantic-field</code>","text":"<pre><code>kernel: str | None = None\n</code></pre> <p>The name and version number of the kernel being used. This value is arbitrary, and will likely not be used by the end user.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.mhs_15m","title":"mhs_15m  <code>pydantic-field</code>","text":"<pre><code>mhs_15m: float\n</code></pre> <p>The average hashrate of the board in MH/s since 15 minutes ago.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.mhs_1m","title":"mhs_1m  <code>pydantic-field</code>","text":"<pre><code>mhs_1m: float\n</code></pre> <p>The average hashrate of the board in MH/s since 1 minute ago. This should be used as the \"real hashrate\" of the board by the end user.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.mhs_5m","title":"mhs_5m  <code>pydantic-field</code>","text":"<pre><code>mhs_5m: float\n</code></pre> <p>The average hashrate of the board in MH/s since 5 minutes ago.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.model","title":"model  <code>pydantic-field</code>","text":"<pre><code>model: str\n</code></pre> <p>The model of the device this board is attached to. This value must match the <code>type</code> value of the version command.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.outlet_temperature","title":"outlet_temperature  <code>pydantic-field</code>","text":"<pre><code>outlet_temperature: float\n</code></pre> <p>The outlet temperature of the board. This is usually sourced from the last sensor on the board.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.pcb_temperature","title":"pcb_temperature  <code>pydantic-field</code>","text":"<pre><code>pcb_temperature: float\n</code></pre> <p>The PCB temperature of the board.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.serial_number","title":"serial_number  <code>pydantic-field</code>","text":"<pre><code>serial_number: str | None = None\n</code></pre> <p>The serial number of the board if applicable.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.tuned","title":"tuned  <code>pydantic-field</code>","text":"<pre><code>tuned: bool\n</code></pre> <p>Whether this board is fully tuned. The meaning of this field is very implementation specific, but should be used to indicate that the board is currently at \"nominal\".</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.voltage","title":"voltage  <code>pydantic-field</code>","text":"<pre><code>voltage: float\n</code></pre> <p>The voltage of the board, in volts.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.wattage","title":"wattage  <code>pydantic-field</code>","text":"<pre><code>wattage: int\n</code></pre> <p>The total power draw of the board in watts.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.wattage_limit","title":"wattage_limit  <code>pydantic-field</code>","text":"<pre><code>wattage_limit: int\n</code></pre> <p>The maximum power draw of the board.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailResult.working_chips","title":"working_chips  <code>pydantic-field</code>","text":"<pre><code>working_chips: int\n</code></pre> <p>The number of working chips on this board.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailsCommandResult","title":"NimbusDeviceDetailsCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>CGMiner compatible devdetails command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusDeviceDetailResult\": {\n      \"description\": \"CGMiner compatible device details.\",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"integer\"\n        },\n        \"Chips\": {\n          \"title\": \"Chips\",\n          \"type\": \"integer\"\n        },\n        \"Cores\": {\n          \"title\": \"Cores\",\n          \"type\": \"integer\"\n        },\n        \"Driver\": {\n          \"title\": \"Driver\",\n          \"type\": \"string\"\n        },\n        \"Kernel\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Kernel\"\n        },\n        \"Model\": {\n          \"title\": \"Model\",\n          \"type\": \"string\"\n        },\n        \"Working Chips\": {\n          \"title\": \"Working Chips\",\n          \"type\": \"integer\"\n        },\n        \"Expected Hashrate\": {\n          \"title\": \"Expected Hashrate\",\n          \"type\": \"number\"\n        },\n        \"Serial Number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Serial Number\"\n        },\n        \"Voltage\": {\n          \"title\": \"Voltage\",\n          \"type\": \"number\"\n        },\n        \"Frequency\": {\n          \"title\": \"Frequency\",\n          \"type\": \"number\"\n        },\n        \"Wattage\": {\n          \"title\": \"Wattage\",\n          \"type\": \"integer\"\n        },\n        \"Wattage Limit\": {\n          \"title\": \"Wattage Limit\",\n          \"type\": \"integer\"\n        },\n        \"mhs_1m\": {\n          \"title\": \"Mhs 1M\",\n          \"type\": \"number\"\n        },\n        \"mhs_5m\": {\n          \"title\": \"Mhs 5M\",\n          \"type\": \"number\"\n        },\n        \"mhs_15m\": {\n          \"title\": \"Mhs 15M\",\n          \"type\": \"number\"\n        },\n        \"Active\": {\n          \"title\": \"Active\",\n          \"type\": \"boolean\"\n        },\n        \"pcb_temperature\": {\n          \"title\": \"Pcb Temperature\",\n          \"type\": \"number\"\n        },\n        \"Intake Temperature\": {\n          \"title\": \"Intake Temperature\",\n          \"type\": \"number\"\n        },\n        \"Outlet Temperature\": {\n          \"title\": \"Outlet Temperature\",\n          \"type\": \"number\"\n        },\n        \"Tuned\": {\n          \"title\": \"Tuned\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"Chips\",\n        \"Cores\",\n        \"Driver\",\n        \"Model\",\n        \"Working Chips\",\n        \"Expected Hashrate\",\n        \"Voltage\",\n        \"Frequency\",\n        \"Wattage\",\n        \"Wattage Limit\",\n        \"mhs_1m\",\n        \"mhs_5m\",\n        \"mhs_15m\",\n        \"Active\",\n        \"pcb_temperature\",\n        \"Intake Temperature\",\n        \"Outlet Temperature\",\n        \"Tuned\"\n      ],\n      \"title\": \"NimbusDeviceDetailResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"CGMiner compatible devdetails command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"DEVDETAILS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusDeviceDetailResult\"\n      },\n      \"title\": \"Devdetails\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"DEVDETAILS\"\n  ],\n  \"title\": \"NimbusDeviceDetailsCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>devdetails</code>                 (<code>list[NimbusDeviceDetailResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/devdetails.py</code> <pre><code>class NimbusDeviceDetailsCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    CGMiner compatible devdetails command result.\n    \"\"\"\n\n    devdetails: list[NimbusDeviceDetailResult]\n    \"\"\"\n    The result of the devdetails command, one per board. CGMiner compatible.\n    \"\"\"\n</code></pre>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailsCommandResult.devdetails","title":"devdetails  <code>pydantic-field</code>","text":"<pre><code>devdetails: list[NimbusDeviceDetailResult]\n</code></pre> <p>The result of the devdetails command, one per board. CGMiner compatible.</p>"},{"location":"devdetails/#nimbus.responses.devdetails.NimbusDeviceDetailsCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"hardware/","title":"Hardware","text":""},{"location":"hardware/#example","title":"Example","text":""},{"location":"hardware/#request","title":"Request","text":"<p>GET request</p> <pre><code>/nimbus/v0/hardware\n</code></pre> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/hardware\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/hardware\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>CGMiner style command</p> <pre><code>{'command': 'hardware'}\n</code></pre> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"hardware\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"hardware\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre>"},{"location":"hardware/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"I\",\n            \"When\": 1751301513,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"hardware\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"HARDWARE\": [\n        {\n            \"Make\": \"Nimbus\",\n            \"Model\": \"ExampleMiner\",\n            \"Chips\": 189,\n            \"Cores\": 21546,\n            \"Boards\": 3,\n            \"Fans\": 2,\n            \"Board Chips\": [\n                63,\n                63,\n                63\n            ],\n            \"Algo\": \"SHA256\"\n        }\n    ]\n}\n</code></pre>"},{"location":"hardware/#response-models","title":"Response Models","text":""},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareResult","title":"NimbusHardwareResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Hardware information.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Hardware information.\",\n  \"properties\": {\n    \"Make\": {\n      \"title\": \"Make\",\n      \"type\": \"string\"\n    },\n    \"Model\": {\n      \"title\": \"Model\",\n      \"type\": \"string\"\n    },\n    \"Chips\": {\n      \"title\": \"Chips\",\n      \"type\": \"integer\"\n    },\n    \"Cores\": {\n      \"title\": \"Cores\",\n      \"type\": \"integer\"\n    },\n    \"Boards\": {\n      \"title\": \"Boards\",\n      \"type\": \"integer\"\n    },\n    \"Fans\": {\n      \"title\": \"Fans\",\n      \"type\": \"integer\"\n    },\n    \"Board Chips\": {\n      \"items\": {\n        \"type\": \"integer\"\n      },\n      \"title\": \"Board Chips\",\n      \"type\": \"array\"\n    },\n    \"Algo\": {\n      \"title\": \"Algo\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"Make\",\n    \"Model\",\n    \"Chips\",\n    \"Cores\",\n    \"Boards\",\n    \"Fans\",\n    \"Board Chips\",\n    \"Algo\"\n  ],\n  \"title\": \"NimbusHardwareResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>make</code>                 (<code>str</code>)             </li> <li> <code>model</code>                 (<code>str</code>)             </li> <li> <code>chips</code>                 (<code>int</code>)             </li> <li> <code>cores</code>                 (<code>int</code>)             </li> <li> <code>boards</code>                 (<code>int</code>)             </li> <li> <code>fans</code>                 (<code>int</code>)             </li> <li> <code>board_chips</code>                 (<code>list[int]</code>)             </li> <li> <code>algo</code>                 (<code>str</code>)             </li> </ul> Source code in <code>nimbus/responses/hardware.py</code> <pre><code>class NimbusHardwareResult(BaseModel):\n    \"\"\"\n    Hardware information.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    make: str\n    \"\"\"\n    The make of the miner.\n    This should be something like `\"Antminer\"`, `\"Whatsminer\"`, or `\"Avalonminer\"`.\n    \"\"\"\n    model: str\n    \"\"\"\n    The model of the miner.\n    This should be something like `\"S9\"`, `\"M30S++VH30\"`, or `\"A1246\"`.\n    \"\"\"\n    chips: int\n    \"\"\"\n    The total expected number of chips across all boards.\n    \"\"\"\n    cores: int\n    \"\"\"\n    The total expected number of core across all chips on all boards.\n    \"\"\"\n    boards: int\n    \"\"\"\n    The total expected number of boards.\n    \"\"\"\n    fans: int\n    \"\"\"\n    The total expected number of fans.\n    \"\"\"\n    board_chips: list[int]\n    \"\"\"\n    The chips expected on each board, in order by board ID.\n    This will be the same chip count for all boards for most devices, but some may have different chip counts per board.\n    This should be somthing like `[63, 63, 63]`.\n    \"\"\"\n    algo: str\n    \"\"\"\n    The algorithm this device is mining.\n    This should be something like `\"SHA256\"`.\n    \"\"\"\n</code></pre>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareResult.algo","title":"algo  <code>pydantic-field</code>","text":"<pre><code>algo: str\n</code></pre> <p>The algorithm this device is mining. This should be something like <code>\"SHA256\"</code>.</p>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareResult.board_chips","title":"board_chips  <code>pydantic-field</code>","text":"<pre><code>board_chips: list[int]\n</code></pre> <p>The chips expected on each board, in order by board ID. This will be the same chip count for all boards for most devices, but some may have different chip counts per board. This should be somthing like <code>[63, 63, 63]</code>.</p>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareResult.boards","title":"boards  <code>pydantic-field</code>","text":"<pre><code>boards: int\n</code></pre> <p>The total expected number of boards.</p>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareResult.chips","title":"chips  <code>pydantic-field</code>","text":"<pre><code>chips: int\n</code></pre> <p>The total expected number of chips across all boards.</p>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareResult.cores","title":"cores  <code>pydantic-field</code>","text":"<pre><code>cores: int\n</code></pre> <p>The total expected number of core across all chips on all boards.</p>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareResult.fans","title":"fans  <code>pydantic-field</code>","text":"<pre><code>fans: int\n</code></pre> <p>The total expected number of fans.</p>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareResult.make","title":"make  <code>pydantic-field</code>","text":"<pre><code>make: str\n</code></pre> <p>The make of the miner. This should be something like <code>\"Antminer\"</code>, <code>\"Whatsminer\"</code>, or <code>\"Avalonminer\"</code>.</p>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareResult.model","title":"model  <code>pydantic-field</code>","text":"<pre><code>model: str\n</code></pre> <p>The model of the miner. This should be something like <code>\"S9\"</code>, <code>\"M30S++VH30\"</code>, or <code>\"A1246\"</code>.</p>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareCommandResult","title":"NimbusHardwareCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Hardware command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusHardwareResult\": {\n      \"description\": \"Hardware information.\",\n      \"properties\": {\n        \"Make\": {\n          \"title\": \"Make\",\n          \"type\": \"string\"\n        },\n        \"Model\": {\n          \"title\": \"Model\",\n          \"type\": \"string\"\n        },\n        \"Chips\": {\n          \"title\": \"Chips\",\n          \"type\": \"integer\"\n        },\n        \"Cores\": {\n          \"title\": \"Cores\",\n          \"type\": \"integer\"\n        },\n        \"Boards\": {\n          \"title\": \"Boards\",\n          \"type\": \"integer\"\n        },\n        \"Fans\": {\n          \"title\": \"Fans\",\n          \"type\": \"integer\"\n        },\n        \"Board Chips\": {\n          \"items\": {\n            \"type\": \"integer\"\n          },\n          \"title\": \"Board Chips\",\n          \"type\": \"array\"\n        },\n        \"Algo\": {\n          \"title\": \"Algo\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"Make\",\n        \"Model\",\n        \"Chips\",\n        \"Cores\",\n        \"Boards\",\n        \"Fans\",\n        \"Board Chips\",\n        \"Algo\"\n      ],\n      \"title\": \"NimbusHardwareResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Hardware command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"HARDWARE\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusHardwareResult\"\n      },\n      \"title\": \"Hardware\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"HARDWARE\"\n  ],\n  \"title\": \"NimbusHardwareCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>hardware</code>                 (<code>list[NimbusHardwareResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/hardware.py</code> <pre><code>class NimbusHardwareCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Hardware command result.\n    \"\"\"\n\n    hardware: list[NimbusHardwareResult]\n    \"\"\"\n    The result of the hardware command.\n    \"\"\"\n</code></pre>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareCommandResult.hardware","title":"hardware  <code>pydantic-field</code>","text":"<pre><code>hardware: list[NimbusHardwareResult]\n</code></pre> <p>The result of the hardware command.</p>"},{"location":"hardware/#nimbus.responses.hardware.NimbusHardwareCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"network/","title":"Network","text":""},{"location":"network/#example","title":"Example","text":""},{"location":"network/#request","title":"Request","text":"<p>GET request</p> <pre><code>/nimbus/v0/network\n</code></pre> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/network\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/network\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>CGMiner style command</p> <pre><code>{'command': 'network'}\n</code></pre> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"network\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"network\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre>"},{"location":"network/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"I\",\n            \"When\": 1751301513,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"network\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"NETWORK\": [\n        {\n            \"IP\": \"192.168.1.25\",\n            \"Gateway\": \"192.168.1.1\",\n            \"Subnet Mask\": \"255.255.255.0\",\n            \"Dynamic\": true,\n            \"MAC\": \"11:22:33:44:55:66\"\n        }\n    ]\n}\n</code></pre>"},{"location":"network/#response-models","title":"Response Models","text":""},{"location":"network/#nimbus.responses.network.NimbusNetworkResult","title":"NimbusNetworkResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Network information.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Network information.\",\n  \"properties\": {\n    \"IP\": {\n      \"title\": \"IP\",\n      \"type\": \"string\"\n    },\n    \"Gateway\": {\n      \"title\": \"Gateway\",\n      \"type\": \"string\"\n    },\n    \"Subnet Mask\": {\n      \"title\": \"Subnet Mask\",\n      \"type\": \"string\"\n    },\n    \"Dynamic\": {\n      \"default\": true,\n      \"title\": \"Dynamic\",\n      \"type\": \"boolean\"\n    },\n    \"MAC\": {\n      \"title\": \"MAC\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"IP\",\n    \"Gateway\",\n    \"Subnet Mask\",\n    \"MAC\"\n  ],\n  \"title\": \"NimbusNetworkResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>ip</code>                 (<code>str</code>)             </li> <li> <code>gateway</code>                 (<code>str</code>)             </li> <li> <code>subnet_mask</code>                 (<code>str</code>)             </li> <li> <code>dynamic</code>                 (<code>bool</code>)             </li> <li> <code>mac</code>                 (<code>str</code>)             </li> </ul> Source code in <code>nimbus/responses/network.py</code> <pre><code>class NimbusNetworkResult(BaseModel):\n    \"\"\"\n    Network information.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    ip: str = Field(alias=\"IP\", title=\"IP\")\n    \"\"\"\n    The current IP address of the device.\n    \"\"\"\n    gateway: str\n    \"\"\"\n    The gateway the device is configured to use.\n    \"\"\"\n    subnet_mask: str\n    \"\"\"\n    The subnet mask of the network.\n    This must be in the form `\"WWW.XXX.YYY.ZZZ\"`.\n    For example, for a `/24` subnet (255 addresses), the mask should be `\"255.255.255.0\"`.\n    \"\"\"\n    dynamic: bool = True\n    \"\"\"\n    Whether the device is using DHCP or not.\n    \"\"\"\n    mac: str = Field(alias=\"MAC\", title=\"MAC\")\n    \"\"\"\n    The MAC address of the device.\n    \"\"\"\n</code></pre>"},{"location":"network/#nimbus.responses.network.NimbusNetworkResult.dynamic","title":"dynamic  <code>pydantic-field</code>","text":"<pre><code>dynamic: bool = True\n</code></pre> <p>Whether the device is using DHCP or not.</p>"},{"location":"network/#nimbus.responses.network.NimbusNetworkResult.gateway","title":"gateway  <code>pydantic-field</code>","text":"<pre><code>gateway: str\n</code></pre> <p>The gateway the device is configured to use.</p>"},{"location":"network/#nimbus.responses.network.NimbusNetworkResult.ip","title":"ip  <code>pydantic-field</code>","text":"<pre><code>ip: str\n</code></pre> <p>The current IP address of the device.</p>"},{"location":"network/#nimbus.responses.network.NimbusNetworkResult.mac","title":"mac  <code>pydantic-field</code>","text":"<pre><code>mac: str\n</code></pre> <p>The MAC address of the device.</p>"},{"location":"network/#nimbus.responses.network.NimbusNetworkResult.subnet_mask","title":"subnet_mask  <code>pydantic-field</code>","text":"<pre><code>subnet_mask: str\n</code></pre> <p>The subnet mask of the network. This must be in the form <code>\"WWW.XXX.YYY.ZZZ\"</code>. For example, for a <code>/24</code> subnet (255 addresses), the mask should be <code>\"255.255.255.0\"</code>.</p>"},{"location":"network/#nimbus.responses.network.NimbusNetworkCommandResult","title":"NimbusNetworkCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Network command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusNetworkResult\": {\n      \"description\": \"Network information.\",\n      \"properties\": {\n        \"IP\": {\n          \"title\": \"IP\",\n          \"type\": \"string\"\n        },\n        \"Gateway\": {\n          \"title\": \"Gateway\",\n          \"type\": \"string\"\n        },\n        \"Subnet Mask\": {\n          \"title\": \"Subnet Mask\",\n          \"type\": \"string\"\n        },\n        \"Dynamic\": {\n          \"default\": true,\n          \"title\": \"Dynamic\",\n          \"type\": \"boolean\"\n        },\n        \"MAC\": {\n          \"title\": \"MAC\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"IP\",\n        \"Gateway\",\n        \"Subnet Mask\",\n        \"MAC\"\n      ],\n      \"title\": \"NimbusNetworkResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Network command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"NETWORK\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusNetworkResult\"\n      },\n      \"title\": \"Network\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"NETWORK\"\n  ],\n  \"title\": \"NimbusNetworkCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>network</code>                 (<code>list[NimbusNetworkResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/network.py</code> <pre><code>class NimbusNetworkCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Network command result.\n    \"\"\"\n\n    network: list[NimbusNetworkResult]\n    \"\"\"\n    The result of the network command.\n    \"\"\"\n</code></pre>"},{"location":"network/#nimbus.responses.network.NimbusNetworkCommandResult.network","title":"network  <code>pydantic-field</code>","text":"<pre><code>network: list[NimbusNetworkResult]\n</code></pre> <p>The result of the network command.</p>"},{"location":"network/#nimbus.responses.network.NimbusNetworkCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"pause/","title":"Pause","text":""},{"location":"pause/#example","title":"Example","text":""},{"location":"pause/#request","title":"Request","text":"<p>CGMiner style command</p> <p>Pause now: <pre><code>{'command': 'pause'}\n</code></pre></p> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"pause\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"pause\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>Wait 10 seconds before pauseing: <pre><code>{'command': 'pause', 'param': {'after': 10}}\n</code></pre></p> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"pause\",\"param\":{\"after\":10}}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"pause\",\"param\":{\"after\":10}})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>POST request</p> <p>Pause now: <pre><code>/nimbus/v0/pause\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"after\": 0} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/pause\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/pause\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'after': 0})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>Wait 10 seconds before pauseing: <pre><code>/nimbus/v0/pause\n</code></pre> Body: <pre><code>{\"after\": 10}\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"after\": 10} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/pause\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/pause\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'after': 10})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>GET request</p> <p>Pause now: <pre><code>/nimbus/v0/pause\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/pause\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/pause\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"pause/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"S\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"pause\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"PAUSE\": [\n        {\n            \"When\": 1751301524\n        }\n    ]\n}\n</code></pre>"},{"location":"pause/#parameters","title":"Parameters","text":""},{"location":"pause/#nimbus.requests.pause.NimbusPauseParams","title":"NimbusPauseParams  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pause request parameters.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Pause request parameters.\",\n  \"properties\": {\n    \"after\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"After\"\n    }\n  },\n  \"title\": \"NimbusPauseParams\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>after</code>                 (<code>int | None</code>)             </li> </ul> Source code in <code>nimbus/requests/pause.py</code> <pre><code>class NimbusPauseParams(BaseModel):\n    \"\"\"\n    Pause request parameters.\n    \"\"\"\n\n    after: int | None = None\n    \"\"\"\n    How long to wait before pausing mining in seconds.\n    \"\"\"\n</code></pre>"},{"location":"pause/#nimbus.requests.pause.NimbusPauseParams.after","title":"after  <code>pydantic-field</code>","text":"<pre><code>after: int | None = None\n</code></pre> <p>How long to wait before pausing mining in seconds.</p>"},{"location":"pause/#response-models","title":"Response Models","text":""},{"location":"pause/#nimbus.responses.pause.NimbusPauseResult","title":"NimbusPauseResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The result of the pause command.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The result of the pause command.\",\n  \"properties\": {\n    \"When\": {\n      \"format\": \"date-time\",\n      \"title\": \"When\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"When\"\n  ],\n  \"title\": \"NimbusPauseResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>when</code>                 (<code>datetime</code>)             </li> </ul> Source code in <code>nimbus/responses/pause.py</code> <pre><code>class NimbusPauseResult(BaseModel):\n    \"\"\"\n    The result of the pause command.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    when: Annotated[datetime, BeforeValidator(parse_unix_timestamp)]\n    \"\"\"\n    When the pause will occur as UNIX timestamp in seconds.\n    \"\"\"\n\n    @field_serializer(\"when\")\n    def serialize_when(self, when: datetime, _info) -&gt; int:\n        return int(when.timestamp())\n</code></pre>"},{"location":"pause/#nimbus.responses.pause.NimbusPauseResult.when","title":"when  <code>pydantic-field</code>","text":"<pre><code>when: datetime\n</code></pre> <p>When the pause will occur as UNIX timestamp in seconds.</p>"},{"location":"pause/#nimbus.responses.pause.NimbusPauseCommandResult","title":"NimbusPauseCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Pause command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusPauseResult\": {\n      \"description\": \"The result of the pause command.\",\n      \"properties\": {\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"When\"\n      ],\n      \"title\": \"NimbusPauseResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Pause command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"PAUSE\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusPauseResult\"\n      },\n      \"title\": \"Pause\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"PAUSE\"\n  ],\n  \"title\": \"NimbusPauseCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>pause</code>                 (<code>list[NimbusPauseResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/pause.py</code> <pre><code>class NimbusPauseCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Pause command result.\n    \"\"\"\n\n    pause: list[NimbusPauseResult]\n    \"\"\"\n    The result of the pause command.\n    \"\"\"\n</code></pre>"},{"location":"pause/#nimbus.responses.pause.NimbusPauseCommandResult.pause","title":"pause  <code>pydantic-field</code>","text":"<pre><code>pause: list[NimbusPauseResult]\n</code></pre> <p>The result of the pause command.</p>"},{"location":"pause/#nimbus.responses.pause.NimbusPauseCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"pools/","title":"Pools","text":""},{"location":"pools/#example","title":"Example","text":""},{"location":"pools/#request","title":"Request","text":"<p>GET request</p> <pre><code>/nimbus/v0/pools\n</code></pre> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/pools\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/pools\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>CGMiner style command</p> <pre><code>{'command': 'pools'}\n</code></pre> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"pools\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"pools\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre>"},{"location":"pools/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"I\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"pools\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"POOLS\": [\n        {\n            \"ID\": 0,\n            \"URL\": \"stratum+tcp://pool.nimbus.org:3333\",\n            \"Group\": 0,\n            \"Status\": \"Alive\",\n            \"Priority\": 0,\n            \"Quota\": 1,\n            \"Accepted\": 100,\n            \"Rejected\": 0,\n            \"Stale\": 0,\n            \"Difficulty Accepted\": 10000,\n            \"Difficulty Rejected\": 0,\n            \"Difficulty Stale\": 0,\n            \"User\": \"NimbusExample.group_0_pool_0\",\n            \"Stratum Active\": true,\n            \"POOL\": 0,\n            \"Alive\": 1\n        },\n        {\n            \"ID\": 0,\n            \"URL\": \"stratum+tcp://solo.nimbus.org:3333\",\n            \"Group\": 1,\n            \"Status\": \"Alive\",\n            \"Priority\": 0,\n            \"Quota\": 3,\n            \"Accepted\": 100,\n            \"Rejected\": 0,\n            \"Stale\": 0,\n            \"Difficulty Accepted\": 10000,\n            \"Difficulty Rejected\": 0,\n            \"Difficulty Stale\": 0,\n            \"User\": \"NimbusExample.group_1_pool_0\",\n            \"Stratum Active\": true,\n            \"POOL\": 0,\n            \"Alive\": 1\n        },\n        {\n            \"ID\": 1,\n            \"URL\": \"stratum+tcp://solo.backup.nimbus.org:3333\",\n            \"Group\": 1,\n            \"Status\": \"Dead\",\n            \"Priority\": 1,\n            \"Quota\": 3,\n            \"Accepted\": 0,\n            \"Rejected\": 0,\n            \"Stale\": 0,\n            \"Difficulty Accepted\": 0,\n            \"Difficulty Rejected\": 0,\n            \"Difficulty Stale\": 0,\n            \"User\": \"NimbusExample.group_1_pool_1\",\n            \"Stratum Active\": false,\n            \"POOL\": 1,\n            \"Alive\": 0\n        }\n    ]\n}\n</code></pre>"},{"location":"pools/#response-models","title":"Response Models","text":""},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult","title":"NimbusPoolsResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>CGMiner compatible pool information.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusPoolStatus\": {\n      \"description\": \"CGMiner compatible pool status code.\",\n      \"enum\": [\n        \"Alive\",\n        \"Dead\",\n        \"Connecting\",\n        \"Disabled\"\n      ],\n      \"title\": \"NimbusPoolStatus\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"CGMiner compatible pool information.\",\n  \"properties\": {\n    \"ID\": {\n      \"title\": \"ID\",\n      \"type\": \"integer\"\n    },\n    \"URL\": {\n      \"title\": \"URL\",\n      \"type\": \"string\"\n    },\n    \"Group\": {\n      \"default\": 0,\n      \"title\": \"Group\",\n      \"type\": \"integer\"\n    },\n    \"Status\": {\n      \"$ref\": \"#/$defs/NimbusPoolStatus\"\n    },\n    \"Priority\": {\n      \"title\": \"Priority\",\n      \"type\": \"integer\"\n    },\n    \"Quota\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": 0,\n      \"title\": \"Quota\"\n    },\n    \"Accepted\": {\n      \"title\": \"Accepted\",\n      \"type\": \"integer\"\n    },\n    \"Rejected\": {\n      \"title\": \"Rejected\",\n      \"type\": \"integer\"\n    },\n    \"Stale\": {\n      \"title\": \"Stale\",\n      \"type\": \"integer\"\n    },\n    \"Difficulty Accepted\": {\n      \"title\": \"Difficulty Accepted\",\n      \"type\": \"integer\"\n    },\n    \"Difficulty Rejected\": {\n      \"title\": \"Difficulty Rejected\",\n      \"type\": \"integer\"\n    },\n    \"Difficulty Stale\": {\n      \"title\": \"Difficulty Stale\",\n      \"type\": \"integer\"\n    },\n    \"User\": {\n      \"title\": \"User\",\n      \"type\": \"string\"\n    },\n    \"Stratum Active\": {\n      \"title\": \"Stratum Active\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"ID\",\n    \"URL\",\n    \"Status\",\n    \"Priority\",\n    \"Accepted\",\n    \"Rejected\",\n    \"Stale\",\n    \"Difficulty Accepted\",\n    \"Difficulty Rejected\",\n    \"Difficulty Stale\",\n    \"User\",\n    \"Stratum Active\"\n  ],\n  \"title\": \"NimbusPoolsResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>url</code>                 (<code>str</code>)             </li> <li> <code>group</code>                 (<code>int</code>)             </li> <li> <code>status</code>                 (<code>NimbusPoolStatus</code>)             </li> <li> <code>priority</code>                 (<code>int</code>)             </li> <li> <code>quota</code>                 (<code>int | None</code>)             </li> <li> <code>accepted</code>                 (<code>int</code>)             </li> <li> <code>rejected</code>                 (<code>int</code>)             </li> <li> <code>stale</code>                 (<code>int</code>)             </li> <li> <code>difficulty_accepted</code>                 (<code>int</code>)             </li> <li> <code>difficulty_rejected</code>                 (<code>int</code>)             </li> <li> <code>difficulty_stale</code>                 (<code>int</code>)             </li> <li> <code>user</code>                 (<code>str</code>)             </li> <li> <code>stratum_active</code>                 (<code>bool</code>)             </li> </ul> Source code in <code>nimbus/responses/pools.py</code> <pre><code>class NimbusPoolsResult(BaseModel):\n    \"\"\"\n    CGMiner compatible pool information.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    id: int = Field(alias=\"ID\", title=\"ID\")\n    \"\"\"\n    The pool ID indexed from 0.\n    This must be unique when combined with the value of `group`.\n    For example, you may have 2 pools with `id = 0` only if the group id is unique for each.\n    \"\"\"\n    url: str = Field(alias=\"URL\", title=\"URL\")\n    \"\"\"\n    The full stratum URL for the pool.\n    This must be in the correct format for URI parsing.\n    \"\"\"\n    group: int = 0\n    \"\"\"\n    The group ID for this pool.\n    \"\"\"\n    status: NimbusPoolStatus\n    \"\"\"\n    The current status of this pool.\n    \"\"\"\n    priority: int\n    \"\"\"\n    The failover priority for this pool.\n    This value should be unique for a given group.\n    \"\"\"\n    quota: int | None = 0\n    \"\"\"\n    The quota for this pools group.\n    This value may be set to `None` if quotas are unsupported.\n    Quota is what portion of mining work should be sent to this group.\n    For example, a quota of `1` on group `0` and a quota of `3` on group `1` will result in 75% of work being sent to group `1`.\n    \"\"\"\n    accepted: int\n    \"\"\"\n    The number of shares the pool has accepted.\n    \"\"\"\n    rejected: int\n    \"\"\"\n    The number of shares the pool has rejected.\n    \"\"\"\n    stale: int\n    \"\"\"\n    The number of shares marked as stale.\n    \"\"\"\n    difficulty_accepted: int\n    \"\"\"\n    The total difficulty of shares the pool has accepted.\n    \"\"\"\n    difficulty_rejected: int\n    \"\"\"\n    The total difficulty of shares the pool has rejected.\n    \"\"\"\n    difficulty_stale: int\n    \"\"\"\n    The total difficulty of shares marked as stale.\n    \"\"\"\n    user: str\n    \"\"\"\n    The pool user for this pool.\n    \"\"\"\n    stratum_active: bool\n    \"\"\"\n    Whether this pool is the current active pool.\n    \"\"\"\n\n    @computed_field(alias=\"POOL\")\n    @property\n    def pool(self) -&gt; int:\n        \"\"\"\n        The same value as ID, just included for CGMiner compatibility.\n        \"\"\"\n        return self.id\n\n    @computed_field()\n    @property\n    def alive(self) -&gt; int:\n        \"\"\"\n        Whether the current `status` value is `\"Alive\"`.\n        \"\"\"\n        return self.status == NimbusPoolStatus.ALIVE\n</code></pre>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.accepted","title":"accepted  <code>pydantic-field</code>","text":"<pre><code>accepted: int\n</code></pre> <p>The number of shares the pool has accepted.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.alive","title":"alive  <code>property</code>","text":"<pre><code>alive: int\n</code></pre> <p>Whether the current <code>status</code> value is <code>\"Alive\"</code>.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.difficulty_accepted","title":"difficulty_accepted  <code>pydantic-field</code>","text":"<pre><code>difficulty_accepted: int\n</code></pre> <p>The total difficulty of shares the pool has accepted.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.difficulty_rejected","title":"difficulty_rejected  <code>pydantic-field</code>","text":"<pre><code>difficulty_rejected: int\n</code></pre> <p>The total difficulty of shares the pool has rejected.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.difficulty_stale","title":"difficulty_stale  <code>pydantic-field</code>","text":"<pre><code>difficulty_stale: int\n</code></pre> <p>The total difficulty of shares marked as stale.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.group","title":"group  <code>pydantic-field</code>","text":"<pre><code>group: int = 0\n</code></pre> <p>The group ID for this pool.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre> <p>The pool ID indexed from 0. This must be unique when combined with the value of <code>group</code>. For example, you may have 2 pools with <code>id = 0</code> only if the group id is unique for each.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.pool","title":"pool  <code>property</code>","text":"<pre><code>pool: int\n</code></pre> <p>The same value as ID, just included for CGMiner compatibility.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.priority","title":"priority  <code>pydantic-field</code>","text":"<pre><code>priority: int\n</code></pre> <p>The failover priority for this pool. This value should be unique for a given group.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.quota","title":"quota  <code>pydantic-field</code>","text":"<pre><code>quota: int | None = 0\n</code></pre> <p>The quota for this pools group. This value may be set to <code>None</code> if quotas are unsupported. Quota is what portion of mining work should be sent to this group. For example, a quota of <code>1</code> on group <code>0</code> and a quota of <code>3</code> on group <code>1</code> will result in 75% of work being sent to group <code>1</code>.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.rejected","title":"rejected  <code>pydantic-field</code>","text":"<pre><code>rejected: int\n</code></pre> <p>The number of shares the pool has rejected.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.stale","title":"stale  <code>pydantic-field</code>","text":"<pre><code>stale: int\n</code></pre> <p>The number of shares marked as stale.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: NimbusPoolStatus\n</code></pre> <p>The current status of this pool.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.stratum_active","title":"stratum_active  <code>pydantic-field</code>","text":"<pre><code>stratum_active: bool\n</code></pre> <p>Whether this pool is the current active pool.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.url","title":"url  <code>pydantic-field</code>","text":"<pre><code>url: str\n</code></pre> <p>The full stratum URL for the pool. This must be in the correct format for URI parsing.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsResult.user","title":"user  <code>pydantic-field</code>","text":"<pre><code>user: str\n</code></pre> <p>The pool user for this pool.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolStatus","title":"NimbusPoolStatus","text":"<p>               Bases: <code>StrEnum</code></p> <p>CGMiner compatible pool status code.</p> <p>Attributes:</p> Name Type Description <code>ALIVE</code> <p>The pool is alive and connected.</p> <code>CONNECTING</code> <p>The device is actively trying to connect to this pool.</p> <code>DEAD</code> <p>The pool is disconnected.</p> <code>DISABLED</code> <p>The pool has been disabled by the user.</p> Source code in <code>nimbus/responses/pools.py</code> <pre><code>class NimbusPoolStatus(StrEnum):\n    \"\"\"\n    CGMiner compatible pool status code.\n    \"\"\"\n\n    ALIVE = \"Alive\"\n    \"\"\"\n    The pool is alive and connected.\n    \"\"\"\n    DEAD = \"Dead\"\n    \"\"\"\n    The pool is disconnected.\n    \"\"\"\n    CONNECTING = \"Connecting\"\n    \"\"\"\n    The device is actively trying to connect to this pool.\n    \"\"\"\n    DISABLED = \"Disabled\"\n    \"\"\"\n    The pool has been disabled by the user.\n    \"\"\"\n</code></pre>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolStatus.ALIVE","title":"ALIVE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALIVE = 'Alive'\n</code></pre> <p>The pool is alive and connected.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolStatus.CONNECTING","title":"CONNECTING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTING = 'Connecting'\n</code></pre> <p>The device is actively trying to connect to this pool.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolStatus.DEAD","title":"DEAD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEAD = 'Dead'\n</code></pre> <p>The pool is disconnected.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolStatus.DISABLED","title":"DISABLED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISABLED = 'Disabled'\n</code></pre> <p>The pool has been disabled by the user.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsCommandResult","title":"NimbusPoolsCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>CGMiner compatible pools command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusPoolStatus\": {\n      \"description\": \"CGMiner compatible pool status code.\",\n      \"enum\": [\n        \"Alive\",\n        \"Dead\",\n        \"Connecting\",\n        \"Disabled\"\n      ],\n      \"title\": \"NimbusPoolStatus\",\n      \"type\": \"string\"\n    },\n    \"NimbusPoolsResult\": {\n      \"description\": \"CGMiner compatible pool information.\",\n      \"properties\": {\n        \"ID\": {\n          \"title\": \"ID\",\n          \"type\": \"integer\"\n        },\n        \"URL\": {\n          \"title\": \"URL\",\n          \"type\": \"string\"\n        },\n        \"Group\": {\n          \"default\": 0,\n          \"title\": \"Group\",\n          \"type\": \"integer\"\n        },\n        \"Status\": {\n          \"$ref\": \"#/$defs/NimbusPoolStatus\"\n        },\n        \"Priority\": {\n          \"title\": \"Priority\",\n          \"type\": \"integer\"\n        },\n        \"Quota\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": 0,\n          \"title\": \"Quota\"\n        },\n        \"Accepted\": {\n          \"title\": \"Accepted\",\n          \"type\": \"integer\"\n        },\n        \"Rejected\": {\n          \"title\": \"Rejected\",\n          \"type\": \"integer\"\n        },\n        \"Stale\": {\n          \"title\": \"Stale\",\n          \"type\": \"integer\"\n        },\n        \"Difficulty Accepted\": {\n          \"title\": \"Difficulty Accepted\",\n          \"type\": \"integer\"\n        },\n        \"Difficulty Rejected\": {\n          \"title\": \"Difficulty Rejected\",\n          \"type\": \"integer\"\n        },\n        \"Difficulty Stale\": {\n          \"title\": \"Difficulty Stale\",\n          \"type\": \"integer\"\n        },\n        \"User\": {\n          \"title\": \"User\",\n          \"type\": \"string\"\n        },\n        \"Stratum Active\": {\n          \"title\": \"Stratum Active\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"ID\",\n        \"URL\",\n        \"Status\",\n        \"Priority\",\n        \"Accepted\",\n        \"Rejected\",\n        \"Stale\",\n        \"Difficulty Accepted\",\n        \"Difficulty Rejected\",\n        \"Difficulty Stale\",\n        \"User\",\n        \"Stratum Active\"\n      ],\n      \"title\": \"NimbusPoolsResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"CGMiner compatible pools command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"POOLS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusPoolsResult\"\n      },\n      \"title\": \"Pools\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"POOLS\"\n  ],\n  \"title\": \"NimbusPoolsCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>pools</code>                 (<code>list[NimbusPoolsResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/pools.py</code> <pre><code>class NimbusPoolsCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    CGMiner compatible pools command result.\n    \"\"\"\n\n    pools: list[NimbusPoolsResult]\n    \"\"\"\n    The result of the pools command, one per pool. CGMiner compatible.\n    \"\"\"\n</code></pre>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsCommandResult.pools","title":"pools  <code>pydantic-field</code>","text":"<pre><code>pools: list[NimbusPoolsResult]\n</code></pre> <p>The result of the pools command, one per pool. CGMiner compatible.</p>"},{"location":"pools/#nimbus.responses.pools.NimbusPoolsCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"reboot/","title":"Reboot","text":"<p>Rebooting and restarting are slightly different. The <code>reboot</code> command is a full device reboot. The <code>restart</code> command will stop the mining process then start it again.</p> <p>See the restart page for more information.</p>"},{"location":"reboot/#example","title":"Example","text":""},{"location":"reboot/#request","title":"Request","text":"<p>CGMiner style command</p> <p>Reboot now: <pre><code>{'command': 'reboot'}\n</code></pre></p> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"reboot\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"reboot\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>Wait 10 seconds before rebooting: <pre><code>{'command': 'reboot', 'param': {'after': 10}}\n</code></pre></p> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"reboot\",\"param\":{\"after\":10}}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"reboot\",\"param\":{\"after\":10}})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>POST request</p> <p>Reboot now: <pre><code>/nimbus/v0/reboot\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"after\": 0} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/reboot\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/reboot\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'after': 0})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>Wait 10 seconds before rebooting: <pre><code>/nimbus/v0/reboot\n</code></pre> Body: <pre><code>{\"after\": 10}\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"after\": 10} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/reboot\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/reboot\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'after': 10})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>GET request</p> <p>Reboot now: <pre><code>/nimbus/v0/reboot\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/reboot\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/reboot\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"reboot/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"S\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"reboot\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"REBOOT\": [\n        {\n            \"When\": 1751301524\n        }\n    ]\n}\n</code></pre>"},{"location":"reboot/#parameters","title":"Parameters","text":""},{"location":"reboot/#nimbus.requests.reboot.NimbusRebootParams","title":"NimbusRebootParams  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Reboot request parameters.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Reboot request parameters.\",\n  \"properties\": {\n    \"after\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"After\"\n    }\n  },\n  \"title\": \"NimbusRebootParams\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>after</code>                 (<code>int | None</code>)             </li> </ul> Source code in <code>nimbus/requests/reboot.py</code> <pre><code>class NimbusRebootParams(BaseModel):\n    \"\"\"\n    Reboot request parameters.\n    \"\"\"\n\n    after: int | None = None\n    \"\"\"\n    How long to wait before rebooting in seconds.\n    \"\"\"\n</code></pre>"},{"location":"reboot/#nimbus.requests.reboot.NimbusRebootParams.after","title":"after  <code>pydantic-field</code>","text":"<pre><code>after: int | None = None\n</code></pre> <p>How long to wait before rebooting in seconds.</p>"},{"location":"reboot/#response-models","title":"Response Models","text":""},{"location":"reboot/#nimbus.responses.reboot.NimbusRebootResult","title":"NimbusRebootResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The result of the reboot command.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The result of the reboot command.\",\n  \"properties\": {\n    \"When\": {\n      \"format\": \"date-time\",\n      \"title\": \"When\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"When\"\n  ],\n  \"title\": \"NimbusRebootResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>when</code>                 (<code>datetime</code>)             </li> </ul> Source code in <code>nimbus/responses/reboot.py</code> <pre><code>class NimbusRebootResult(BaseModel):\n    \"\"\"\n    The result of the reboot command.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    when: Annotated[datetime, BeforeValidator(parse_unix_timestamp)]\n    \"\"\"\n    When the reboot will occur as UNIX timestamp in seconds.\n    \"\"\"\n\n    @field_serializer(\"when\")\n    def serialize_when(self, when: datetime, _info) -&gt; int:\n        return int(when.timestamp())\n</code></pre>"},{"location":"reboot/#nimbus.responses.reboot.NimbusRebootResult.when","title":"when  <code>pydantic-field</code>","text":"<pre><code>when: datetime\n</code></pre> <p>When the reboot will occur as UNIX timestamp in seconds.</p>"},{"location":"reboot/#nimbus.responses.reboot.NimbusRebootCommandResult","title":"NimbusRebootCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Reboot command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusRebootResult\": {\n      \"description\": \"The result of the reboot command.\",\n      \"properties\": {\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"When\"\n      ],\n      \"title\": \"NimbusRebootResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Reboot command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"REBOOT\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusRebootResult\"\n      },\n      \"title\": \"Reboot\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"REBOOT\"\n  ],\n  \"title\": \"NimbusRebootCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>reboot</code>                 (<code>list[NimbusRebootResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/reboot.py</code> <pre><code>class NimbusRebootCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Reboot command result.\n    \"\"\"\n\n    reboot: list[NimbusRebootResult]\n    \"\"\"\n    The result of the reboot command.\n    \"\"\"\n</code></pre>"},{"location":"reboot/#nimbus.responses.reboot.NimbusRebootCommandResult.reboot","title":"reboot  <code>pydantic-field</code>","text":"<pre><code>reboot: list[NimbusRebootResult]\n</code></pre> <p>The result of the reboot command.</p>"},{"location":"reboot/#nimbus.responses.reboot.NimbusRebootCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"restart/","title":"Restart","text":"<p>Restarting and rebooting are slightly different. The <code>restart</code> command will stop the mining process then start it again. The <code>reboot</code> command is a full device reboot.</p> <p>See the reboot page for more information.</p>"},{"location":"restart/#example","title":"Example","text":""},{"location":"restart/#request","title":"Request","text":"<p>CGMiner style command</p> <p>Restart now: <pre><code>{'command': 'restart'}\n</code></pre></p> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"restart\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"restart\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>Wait 10 seconds before restarting: <pre><code>{'command': 'restart', 'param': {'after': 10}}\n</code></pre></p> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"restart\",\"param\":{\"after\":10}}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"restart\",\"param\":{\"after\":10}})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>POST request</p> <p>Restart now: <pre><code>/nimbus/v0/restart\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"after\": 0} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/restart\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/restart\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'after': 0})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>Wait 10 seconds before restarting: <pre><code>/nimbus/v0/restart\n</code></pre> Body: <pre><code>{\"after\": 10}\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"after\": 10} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/restart\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/restart\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'after': 10})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>GET request</p> <p>Restart now: <pre><code>/nimbus/v0/restart\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/restart\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/restart\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"restart/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"S\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"restart\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"RESTART\": [\n        {\n            \"When\": 1751301524\n        }\n    ]\n}\n</code></pre>"},{"location":"restart/#parameters","title":"Parameters","text":""},{"location":"restart/#nimbus.requests.restart.NimbusRestartParams","title":"NimbusRestartParams  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Restart request parameters.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Restart request parameters.\",\n  \"properties\": {\n    \"after\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"After\"\n    }\n  },\n  \"title\": \"NimbusRestartParams\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>after</code>                 (<code>int | None</code>)             </li> </ul> Source code in <code>nimbus/requests/restart.py</code> <pre><code>class NimbusRestartParams(BaseModel):\n    \"\"\"\n    Restart request parameters.\n    \"\"\"\n\n    after: int | None = None\n    \"\"\"\n    How long to wait before restarting mining in seconds.\n    \"\"\"\n</code></pre>"},{"location":"restart/#nimbus.requests.restart.NimbusRestartParams.after","title":"after  <code>pydantic-field</code>","text":"<pre><code>after: int | None = None\n</code></pre> <p>How long to wait before restarting mining in seconds.</p>"},{"location":"restart/#response-models","title":"Response Models","text":""},{"location":"restart/#nimbus.responses.restart.NimbusRestartResult","title":"NimbusRestartResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The result of the restart command.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The result of the restart command.\",\n  \"properties\": {\n    \"When\": {\n      \"format\": \"date-time\",\n      \"title\": \"When\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"When\"\n  ],\n  \"title\": \"NimbusRestartResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>when</code>                 (<code>datetime</code>)             </li> </ul> Source code in <code>nimbus/responses/restart.py</code> <pre><code>class NimbusRestartResult(BaseModel):\n    \"\"\"\n    The result of the restart command.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    when: Annotated[datetime, BeforeValidator(parse_unix_timestamp)]\n    \"\"\"\n    When the restart will occur as UNIX timestamp in seconds.\n    \"\"\"\n\n    @field_serializer(\"when\")\n    def serialize_when(self, when: datetime, _info) -&gt; int:\n        return int(when.timestamp())\n</code></pre>"},{"location":"restart/#nimbus.responses.restart.NimbusRestartResult.when","title":"when  <code>pydantic-field</code>","text":"<pre><code>when: datetime\n</code></pre> <p>When the restart will occur as UNIX timestamp in seconds.</p>"},{"location":"restart/#nimbus.responses.restart.NimbusRestartCommandResult","title":"NimbusRestartCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Restart command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusRestartResult\": {\n      \"description\": \"The result of the restart command.\",\n      \"properties\": {\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"When\"\n      ],\n      \"title\": \"NimbusRestartResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Restart command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"RESTART\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusRestartResult\"\n      },\n      \"title\": \"Restart\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"RESTART\"\n  ],\n  \"title\": \"NimbusRestartCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>restart</code>                 (<code>list[NimbusRestartResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/restart.py</code> <pre><code>class NimbusRestartCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Restart command result.\n    \"\"\"\n\n    restart: list[NimbusRestartResult]\n    \"\"\"\n    The result of the restart command.\n    \"\"\"\n</code></pre>"},{"location":"restart/#nimbus.responses.restart.NimbusRestartCommandResult.restart","title":"restart  <code>pydantic-field</code>","text":"<pre><code>restart: list[NimbusRestartResult]\n</code></pre> <p>The result of the restart command.</p>"},{"location":"restart/#nimbus.responses.restart.NimbusRestartCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"resume/","title":"Resume","text":""},{"location":"resume/#example","title":"Example","text":""},{"location":"resume/#request","title":"Request","text":"<p>CGMiner style command</p> <p>Resume now: <pre><code>{'command': 'resume'}\n</code></pre></p> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"resume\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"resume\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>Wait 10 seconds before resumeing: <pre><code>{'command': 'resume', 'param': {'after': 10}}\n</code></pre></p> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"resume\",\"param\":{\"after\":10}}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"resume\",\"param\":{\"after\":10}})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>POST request</p> <p>Resume now: <pre><code>/nimbus/v0/resume\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"after\": 0} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/resume\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/resume\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'after': 0})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>Wait 10 seconds before resumeing: <pre><code>/nimbus/v0/resume\n</code></pre> Body: <pre><code>{\"after\": 10}\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"after\": 10} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/resume\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/resume\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'after': 10})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>GET request</p> <p>Resume now: <pre><code>/nimbus/v0/resume\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/resume\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/resume\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"resume/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"S\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"resume\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"RESUME\": [\n        {\n            \"When\": 1751301524\n        }\n    ]\n}\n</code></pre>"},{"location":"resume/#parameters","title":"Parameters","text":""},{"location":"resume/#nimbus.requests.resume.NimbusResumeParams","title":"NimbusResumeParams  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Resume request parameters.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Resume request parameters.\",\n  \"properties\": {\n    \"after\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"After\"\n    }\n  },\n  \"title\": \"NimbusResumeParams\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>after</code>                 (<code>int | None</code>)             </li> </ul> Source code in <code>nimbus/requests/resume.py</code> <pre><code>class NimbusResumeParams(BaseModel):\n    \"\"\"\n    Resume request parameters.\n    \"\"\"\n\n    after: int | None = None\n    \"\"\"\n    How long to wait before resuming mining in seconds.\n    \"\"\"\n</code></pre>"},{"location":"resume/#nimbus.requests.resume.NimbusResumeParams.after","title":"after  <code>pydantic-field</code>","text":"<pre><code>after: int | None = None\n</code></pre> <p>How long to wait before resuming mining in seconds.</p>"},{"location":"resume/#response-models","title":"Response Models","text":""},{"location":"resume/#nimbus.responses.resume.NimbusResumeResult","title":"NimbusResumeResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The result of the resume command.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The result of the resume command.\",\n  \"properties\": {\n    \"When\": {\n      \"format\": \"date-time\",\n      \"title\": \"When\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"When\"\n  ],\n  \"title\": \"NimbusResumeResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>when</code>                 (<code>datetime</code>)             </li> </ul> Source code in <code>nimbus/responses/resume.py</code> <pre><code>class NimbusResumeResult(BaseModel):\n    \"\"\"\n    The result of the resume command.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    when: Annotated[datetime, BeforeValidator(parse_unix_timestamp)]\n    \"\"\"\n    When the resume will occur as UNIX timestamp in seconds.\n    \"\"\"\n\n    @field_serializer(\"when\")\n    def serialize_when(self, when: datetime, _info) -&gt; int:\n        return int(when.timestamp())\n</code></pre>"},{"location":"resume/#nimbus.responses.resume.NimbusResumeResult.when","title":"when  <code>pydantic-field</code>","text":"<pre><code>when: datetime\n</code></pre> <p>When the resume will occur as UNIX timestamp in seconds.</p>"},{"location":"resume/#nimbus.responses.resume.NimbusResumeCommandResult","title":"NimbusResumeCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Resume command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusResumeResult\": {\n      \"description\": \"The result of the resume command.\",\n      \"properties\": {\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"When\"\n      ],\n      \"title\": \"NimbusResumeResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Resume command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"RESUME\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusResumeResult\"\n      },\n      \"title\": \"Resume\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"RESUME\"\n  ],\n  \"title\": \"NimbusResumeCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>resume</code>                 (<code>list[NimbusResumeResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/resume.py</code> <pre><code>class NimbusResumeCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Resume command result.\n    \"\"\"\n\n    resume: list[NimbusResumeResult]\n    \"\"\"\n    The result of the resume command.\n    \"\"\"\n</code></pre>"},{"location":"resume/#nimbus.responses.resume.NimbusResumeCommandResult.resume","title":"resume  <code>pydantic-field</code>","text":"<pre><code>resume: list[NimbusResumeResult]\n</code></pre> <p>The result of the resume command.</p>"},{"location":"resume/#nimbus.responses.resume.NimbusResumeCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"setpools/","title":"Set Pools","text":""},{"location":"setpools/#example","title":"Example","text":"<p>CGMiner style command</p> <pre><code>{'command': 'setpools', 'param': {'groups': [{'name': 'Test', 'pools': [{'url': 'stratum+tcp://stratum.slushpool.com:3333', 'user': 'test', 'password': '123'}]}]}}\n</code></pre> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"setpools\",\"param\":{\"groups\":[{\"name\":\"Test\",\"pools\":[{\"url\":\"stratum+tcp://stratum.slushpool.com:3333\",\"user\":\"test\",\"password\":\"123\"}]}]}}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"setpools\",\"param\":{\"groups\":[{\"name\":\"Test\",\"pools\":[{\"url\":\"stratum+tcp://stratum.slushpool.com:3333\",\"user\":\"test\",\"password\":\"123\"}]}]}})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>POST request</p> <p><pre><code>/nimbus/v0/setpools\n</code></pre> Body: <pre><code>{\"groups\": [{\"name\": \"Test\", \"pools\": [{\"url\": \"stratum+tcp://stratum.slushpool.com:3333\", \"user\": \"test\", \"password\": \"123\"}]}]}\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"groups\": [{\"name\": \"Test\", \"pools\": [{\"url\": \"stratum+tcp://stratum.slushpool.com:3333\", \"user\": \"test\", \"password\": \"123\"}]}]} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/setpools\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/setpools\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'groups': [{'name': 'Test', 'pools': [{'url': 'stratum+tcp://stratum.slushpool.com:3333', 'user': 'test', 'password': '123'}]}]})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"setpools/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"S\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"setpools\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"SETPOOLS\": [\n        {\n            \"Groups\": 1,\n            \"Pools\": 1\n        }\n    ]\n}\n</code></pre>"},{"location":"setpools/#parameters","title":"Parameters","text":""},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsParams","title":"NimbusSetPoolsParams  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Set pools request parameters.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusSetPoolsPool\": {\n      \"description\": \"Set pools pool.\\n\\nRepresents a single pool.\",\n      \"properties\": {\n        \"url\": {\n          \"title\": \"Url\",\n          \"type\": \"string\"\n        },\n        \"user\": {\n          \"title\": \"User\",\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"title\": \"Password\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"url\",\n        \"user\",\n        \"password\"\n      ],\n      \"title\": \"NimbusSetPoolsPool\",\n      \"type\": \"object\"\n    },\n    \"NimbusSetPoolsPoolGroup\": {\n      \"description\": \"Set pools pool group.\\n\\nRepresents a group of pools with a shared quota.\",\n      \"properties\": {\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"quota\": {\n          \"default\": 1,\n          \"title\": \"Quota\",\n          \"type\": \"integer\"\n        },\n        \"pools\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NimbusSetPoolsPool\"\n          },\n          \"title\": \"Pools\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"pools\"\n      ],\n      \"title\": \"NimbusSetPoolsPoolGroup\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"Set pools request parameters.\",\n  \"properties\": {\n    \"groups\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusSetPoolsPoolGroup\"\n      },\n      \"title\": \"Groups\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"groups\"\n  ],\n  \"title\": \"NimbusSetPoolsParams\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>groups</code>                 (<code>list[NimbusSetPoolsPoolGroup]</code>)             </li> </ul> Source code in <code>nimbus/requests/setpools.py</code> <pre><code>class NimbusSetPoolsParams(BaseModel):\n    \"\"\"\n    Set pools request parameters.\n    \"\"\"\n\n    groups: list[NimbusSetPoolsPoolGroup]\n    \"\"\"\n    A list of pool groups to be set on the device.\n    \"\"\"\n</code></pre>"},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsParams.groups","title":"groups  <code>pydantic-field</code>","text":"<pre><code>groups: list[NimbusSetPoolsPoolGroup]\n</code></pre> <p>A list of pool groups to be set on the device.</p>"},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsPoolGroup","title":"NimbusSetPoolsPoolGroup  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Set pools pool group.</p> <p>Represents a group of pools with a shared quota.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusSetPoolsPool\": {\n      \"description\": \"Set pools pool.\\n\\nRepresents a single pool.\",\n      \"properties\": {\n        \"url\": {\n          \"title\": \"Url\",\n          \"type\": \"string\"\n        },\n        \"user\": {\n          \"title\": \"User\",\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"title\": \"Password\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"url\",\n        \"user\",\n        \"password\"\n      ],\n      \"title\": \"NimbusSetPoolsPool\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"Set pools pool group.\\n\\nRepresents a group of pools with a shared quota.\",\n  \"properties\": {\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"quota\": {\n      \"default\": 1,\n      \"title\": \"Quota\",\n      \"type\": \"integer\"\n    },\n    \"pools\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusSetPoolsPool\"\n      },\n      \"title\": \"Pools\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"pools\"\n  ],\n  \"title\": \"NimbusSetPoolsPoolGroup\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>quota</code>                 (<code>int</code>)             </li> <li> <code>pools</code>                 (<code>list[NimbusSetPoolsPool]</code>)             </li> </ul> Source code in <code>nimbus/requests/setpools.py</code> <pre><code>class NimbusSetPoolsPoolGroup(BaseModel):\n    \"\"\"\n    Set pools pool group.\n\n    Represents a group of pools with a shared quota.\n    \"\"\"\n\n    name: str | None = None\n    \"\"\"\n    The name of this pool group.\n    This may or may not be used on the device side, but to ensure compatibility with all systems it is included.\n    \"\"\"\n    quota: int = 1\n    \"\"\"\n    The quota for this pool group.\n    Shares are distributed by totaling all group quotas, then taking the current group quota divided by total quota.\n    \"\"\"\n    pools: list[NimbusSetPoolsPool]\n    \"\"\"\n    The pools for this pool group.\n    \"\"\"\n</code></pre>"},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsPoolGroup.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str | None = None\n</code></pre> <p>The name of this pool group. This may or may not be used on the device side, but to ensure compatibility with all systems it is included.</p>"},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsPoolGroup.pools","title":"pools  <code>pydantic-field</code>","text":"<pre><code>pools: list[NimbusSetPoolsPool]\n</code></pre> <p>The pools for this pool group.</p>"},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsPoolGroup.quota","title":"quota  <code>pydantic-field</code>","text":"<pre><code>quota: int = 1\n</code></pre> <p>The quota for this pool group. Shares are distributed by totaling all group quotas, then taking the current group quota divided by total quota.</p>"},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsPool","title":"NimbusSetPoolsPool  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Set pools pool.</p> <p>Represents a single pool.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Set pools pool.\\n\\nRepresents a single pool.\",\n  \"properties\": {\n    \"url\": {\n      \"title\": \"Url\",\n      \"type\": \"string\"\n    },\n    \"user\": {\n      \"title\": \"User\",\n      \"type\": \"string\"\n    },\n    \"password\": {\n      \"title\": \"Password\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"url\",\n    \"user\",\n    \"password\"\n  ],\n  \"title\": \"NimbusSetPoolsPool\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>url</code>                 (<code>str</code>)             </li> <li> <code>user</code>                 (<code>str</code>)             </li> <li> <code>password</code>                 (<code>str</code>)             </li> </ul> Source code in <code>nimbus/requests/setpools.py</code> <pre><code>class NimbusSetPoolsPool(BaseModel):\n    \"\"\"\n    Set pools pool.\n\n    Represents a single pool.\n    \"\"\"\n\n    url: str\n    \"\"\"\n    The URL for this pool.\n    \"\"\"\n    user: str\n    \"\"\"\n    The username and worker name to be used on the pool.\n    \"\"\"\n    password: str\n    \"\"\"\n    The password to use for this pool.\n    \"\"\"\n</code></pre>"},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsPool.password","title":"password  <code>pydantic-field</code>","text":"<pre><code>password: str\n</code></pre> <p>The password to use for this pool.</p>"},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsPool.url","title":"url  <code>pydantic-field</code>","text":"<pre><code>url: str\n</code></pre> <p>The URL for this pool.</p>"},{"location":"setpools/#nimbus.requests.setpools.NimbusSetPoolsPool.user","title":"user  <code>pydantic-field</code>","text":"<pre><code>user: str\n</code></pre> <p>The username and worker name to be used on the pool.</p>"},{"location":"setpools/#response-models","title":"Response Models","text":""},{"location":"setpools/#nimbus.responses.setpools.NimbusSetPoolsResult","title":"NimbusSetPoolsResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The result of the set pools command.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The result of the set pools command.\",\n  \"properties\": {\n    \"Groups\": {\n      \"title\": \"Groups\",\n      \"type\": \"integer\"\n    },\n    \"Pools\": {\n      \"title\": \"Pools\",\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"Groups\",\n    \"Pools\"\n  ],\n  \"title\": \"NimbusSetPoolsResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>groups</code>                 (<code>int</code>)             </li> <li> <code>pools</code>                 (<code>int</code>)             </li> </ul> Source code in <code>nimbus/responses/setpools.py</code> <pre><code>class NimbusSetPoolsResult(BaseModel):\n    \"\"\"\n    The result of the set pools command.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    groups: int\n    \"\"\"\n    The number of groups being set.\n    \"\"\"\n    pools: int\n    \"\"\"\n    The number of pools being set.\n    \"\"\"\n</code></pre>"},{"location":"setpools/#nimbus.responses.setpools.NimbusSetPoolsResult.groups","title":"groups  <code>pydantic-field</code>","text":"<pre><code>groups: int\n</code></pre> <p>The number of groups being set.</p>"},{"location":"setpools/#nimbus.responses.setpools.NimbusSetPoolsResult.pools","title":"pools  <code>pydantic-field</code>","text":"<pre><code>pools: int\n</code></pre> <p>The number of pools being set.</p>"},{"location":"setpools/#nimbus.responses.setpools.NimbusSetPoolsCommandResult","title":"NimbusSetPoolsCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Set pools command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusSetPoolsResult\": {\n      \"description\": \"The result of the set pools command.\",\n      \"properties\": {\n        \"Groups\": {\n          \"title\": \"Groups\",\n          \"type\": \"integer\"\n        },\n        \"Pools\": {\n          \"title\": \"Pools\",\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"Groups\",\n        \"Pools\"\n      ],\n      \"title\": \"NimbusSetPoolsResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Set pools command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"SETPOOLS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusSetPoolsResult\"\n      },\n      \"title\": \"Setpools\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"SETPOOLS\"\n  ],\n  \"title\": \"NimbusSetPoolsCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>setpools</code>                 (<code>list[NimbusSetPoolsResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/setpools.py</code> <pre><code>class NimbusSetPoolsCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Set pools command result.\n    \"\"\"\n\n    setpools: list[NimbusSetPoolsResult]\n    \"\"\"\n    The result of the setpools command.\n    \"\"\"\n</code></pre>"},{"location":"setpools/#nimbus.responses.setpools.NimbusSetPoolsCommandResult.setpools","title":"setpools  <code>pydantic-field</code>","text":"<pre><code>setpools: list[NimbusSetPoolsResult]\n</code></pre> <p>The result of the setpools command.</p>"},{"location":"setpools/#nimbus.responses.setpools.NimbusSetPoolsCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"summary/","title":"Summary","text":""},{"location":"summary/#example","title":"Example","text":""},{"location":"summary/#request","title":"Request","text":"<p>GET request</p> <pre><code>/nimbus/v0/summary\n</code></pre> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/summary\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/summary\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>CGMiner style command</p> <pre><code>{'command': 'summary'}\n</code></pre> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"summary\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"summary\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre>"},{"location":"summary/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"I\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"summary\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"SUMMARY\": [\n        {\n            \"Elapsed\": 100,\n            \"Uptime\": 100,\n            \"MHS av\": 13500000.0,\n            \"MHS 1m\": 13500000.0,\n            \"MHS 5m\": 13500000.0,\n            \"MHS 15m\": 13500000.0,\n            \"MAC\": \"11:22:33:44:55:66\",\n            \"Serial Number\": \"NIM123456TEST\",\n            \"Control Board\": \"NimBoard\",\n            \"Fans\": [\n                6000,\n                6000\n            ],\n            \"Fan Speed\": 100.0,\n            \"Psu Fans\": [],\n            \"Psu Fan Speed\": 100.0,\n            \"Chip Temperature Avg\": 70.0,\n            \"Board Temperature Avg\": 55.0,\n            \"Fluid Temperature\": 25.0,\n            \"Wattage\": 1400,\n            \"Wattage Limit\": 1420,\n            \"Is Mining\": true,\n            \"Messages\": [\n                {\n                    \"When\": 1751301514,\n                    \"Code\": null,\n                    \"Message\": \"Testing the message system.\",\n                    \"Severity\": \"Info\"\n                },\n                {\n                    \"When\": 1751301514,\n                    \"Code\": null,\n                    \"Message\": \"The device is getting hot. Fans are ramping to 100%.\",\n                    \"Severity\": \"Warning\"\n                },\n                {\n                    \"When\": 1751301514,\n                    \"Code\": null,\n                    \"Message\": \"The message system has crashed.\",\n                    \"Severity\": \"Error\"\n                },\n                {\n                    \"When\": 1751301514,\n                    \"Code\": null,\n                    \"Message\": \"The device is currently on fire. Run!\",\n                    \"Severity\": \"Fatal\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"summary/#response-models","title":"Response Models","text":""},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult","title":"NimbusSummaryResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Partially CGMiner compatible mining summary.</p> <p>This result is partially compatible due to the removal of the majority of the information from the CGMiner standard. Any missing data may be added at the prerogative of the implementor.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusMinerMessage\": {\n      \"description\": \"Miner messages, representing different state information.\",\n      \"properties\": {\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Code\"\n        },\n        \"Message\": {\n          \"title\": \"Message\",\n          \"type\": \"string\"\n        },\n        \"Severity\": {\n          \"$ref\": \"#/$defs/NimbusMinerMessageSeverity\"\n        }\n      },\n      \"required\": [\n        \"When\",\n        \"Message\",\n        \"Severity\"\n      ],\n      \"title\": \"NimbusMinerMessage\",\n      \"type\": \"object\"\n    },\n    \"NimbusMinerMessageSeverity\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"Fatal\",\n        \"Error\",\n        \"Warning\",\n        \"Info\"\n      ],\n      \"title\": \"NimbusMinerMessageSeverity\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Partially CGMiner compatible mining summary.\\n\\nThis result is partially compatible due to the removal of the majority of the information from the CGMiner standard.\\nAny missing data may be added at the prerogative of the implementor.\",\n  \"properties\": {\n    \"Elapsed\": {\n      \"title\": \"Elapsed\",\n      \"type\": \"integer\"\n    },\n    \"Uptime\": {\n      \"title\": \"Uptime\",\n      \"type\": \"integer\"\n    },\n    \"MHS av\": {\n      \"title\": \"MHS av\",\n      \"type\": \"number\"\n    },\n    \"MHS 1m\": {\n      \"title\": \"MHS 1m\",\n      \"type\": \"number\"\n    },\n    \"MHS 5m\": {\n      \"title\": \"MHS 5m\",\n      \"type\": \"number\"\n    },\n    \"MHS 15m\": {\n      \"title\": \"MHS 15m\",\n      \"type\": \"number\"\n    },\n    \"MAC\": {\n      \"title\": \"MAC\",\n      \"type\": \"string\"\n    },\n    \"Serial Number\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Serial Number\"\n    },\n    \"Control Board\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Control Board\"\n    },\n    \"Fans\": {\n      \"items\": {\n        \"anyOf\": [\n          {\n            \"type\": \"integer\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"title\": \"Fans\",\n      \"type\": \"array\"\n    },\n    \"Fan Speed\": {\n      \"default\": 0,\n      \"title\": \"Fan Speed\",\n      \"type\": \"number\"\n    },\n    \"Psu Fans\": {\n      \"items\": {\n        \"anyOf\": [\n          {\n            \"type\": \"integer\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"title\": \"Psu Fans\",\n      \"type\": \"array\"\n    },\n    \"Psu Fan Speed\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Psu Fan Speed\"\n    },\n    \"Chip Temperature Avg\": {\n      \"title\": \"Chip Temperature Avg\",\n      \"type\": \"number\"\n    },\n    \"Board Temperature Avg\": {\n      \"title\": \"Board Temperature Avg\",\n      \"type\": \"number\"\n    },\n    \"Fluid Temperature\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Fluid Temperature\"\n    },\n    \"Wattage\": {\n      \"title\": \"Wattage\",\n      \"type\": \"integer\"\n    },\n    \"Wattage Limit\": {\n      \"title\": \"Wattage Limit\",\n      \"type\": \"integer\"\n    },\n    \"Is Mining\": {\n      \"title\": \"Is Mining\",\n      \"type\": \"boolean\"\n    },\n    \"Messages\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusMinerMessage\"\n      },\n      \"title\": \"Messages\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"Elapsed\",\n    \"Uptime\",\n    \"MHS av\",\n    \"MHS 1m\",\n    \"MHS 5m\",\n    \"MHS 15m\",\n    \"MAC\",\n    \"Chip Temperature Avg\",\n    \"Board Temperature Avg\",\n    \"Fluid Temperature\",\n    \"Wattage\",\n    \"Wattage Limit\",\n    \"Is Mining\",\n    \"Messages\"\n  ],\n  \"title\": \"NimbusSummaryResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>elapsed</code>                 (<code>int</code>)             </li> <li> <code>uptime</code>                 (<code>int</code>)             </li> <li> <code>mhs_avg</code>                 (<code>float</code>)             </li> <li> <code>mhs_1m</code>                 (<code>float</code>)             </li> <li> <code>mhs_5m</code>                 (<code>float</code>)             </li> <li> <code>mhs_15m</code>                 (<code>float</code>)             </li> <li> <code>mac</code>                 (<code>str</code>)             </li> <li> <code>serial_number</code>                 (<code>str | None</code>)             </li> <li> <code>control_board</code>                 (<code>str | None</code>)             </li> <li> <code>fans</code>                 (<code>list[int | None]</code>)             </li> <li> <code>fan_speed</code>                 (<code>float</code>)             </li> <li> <code>psu_fans</code>                 (<code>list[int | None]</code>)             </li> <li> <code>psu_fan_speed</code>                 (<code>float | None</code>)             </li> <li> <code>chip_temperature_avg</code>                 (<code>float</code>)             </li> <li> <code>board_temperature_avg</code>                 (<code>float</code>)             </li> <li> <code>fluid_temperature</code>                 (<code>float | None</code>)             </li> <li> <code>wattage</code>                 (<code>int</code>)             </li> <li> <code>wattage_limit</code>                 (<code>int</code>)             </li> <li> <code>is_mining</code>                 (<code>bool</code>)             </li> <li> <code>messages</code>                 (<code>list[NimbusMinerMessage]</code>)             </li> </ul> Source code in <code>nimbus/responses/summary.py</code> <pre><code>class NimbusSummaryResult(BaseModel):\n    \"\"\"\n    Partially CGMiner compatible mining summary.\n\n    This result is partially compatible due to the removal of the majority of the information from the CGMiner standard.\n    Any missing data may be added at the prerogative of the implementor.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    elapsed: int\n    \"\"\"\n    The time elapsed since the miner started mining in seconds.\n    \"\"\"\n    uptime: int\n    \"\"\"\n    The total uptime of the system in seconds.\n    \"\"\"\n    mhs_avg: float = Field(alias=\"MHS av\", title=\"MHS av\")\n    \"\"\"\n    The average hashrate of the miner in MH/s since the start of the `elapsed` timer.\n    \"\"\"\n    mhs_1m: float = Field(alias=\"MHS 1m\", title=\"MHS 1m\")\n    \"\"\"\n    The average hashrate of the miner in MH/s since 1 minute ago.\n    This should be used as the \"real hashrate\" of the miner by the end user.\n    \"\"\"\n    mhs_5m: float = Field(alias=\"MHS 5m\", title=\"MHS 5m\")\n    \"\"\"\n    The average hashrate of the miner in MH/s since 5 minutes ago.\n    \"\"\"\n    mhs_15m: float = Field(alias=\"MHS 15m\", title=\"MHS 15m\")\n    \"\"\"\n    The average hashrate of the miner in MH/s since 15 minutes ago.\n    \"\"\"\n    mac: str = Field(alias=\"MAC\", title=\"MAC\")\n    \"\"\"\n    The MAC address or hardware address of the miner.\n    This should be in the format `\"11:22:33:44:55:66\"`.\n    \"\"\"\n    serial_number: str | None = None\n    \"\"\"\n    The serial number of the miner if applicable.\n    \"\"\"\n    control_board: str | None = None\n    \"\"\"\n    The control board type of the miner, if applicable.\n    This should be something like `\"AMLogic\"` or `\"H616\"`.\n    \"\"\"\n    fans: list[int | None] = Field(default_factory=list)\n    \"\"\"\n    The current RPM of the fans, in order.\n    This must be the same length as the number of fans defined in the `hardware` command.\n    For fans which are not responding or have failed, use `None`.\n    \"\"\"\n    fan_speed: float = 0\n    \"\"\"\n    The fan speed being targeted at this moment.\n    This value should be as a percentage, such as `100` or `50` percent speed.\n    For devices which have had fans removed for immersion, set this to `0`.\n    \"\"\"\n    psu_fans: list[int | None] = Field(default_factory=list)\n    \"\"\"\n    The current RPM of the PSU fans, in order.\n    This may be left as an empty list if there are no PSU fan readings.\n    \"\"\"\n    psu_fan_speed: float | None = None\n    \"\"\"\n    The PSU fan speed being targeted at this moment.\n    This value should be as a percentage, such as `100` or `50` percent speed.\n    For devices with no PSU fans, set this to `None`.\n    For devices which have PSU fans but no communication with them, set this to `100`.\n    \"\"\"\n    chip_temperature_avg: float\n    \"\"\"\n    The average temperature of all chips on the miner in degrees C.\n    \"\"\"\n    board_temperature_avg: float\n    \"\"\"\n    The average temperature of all boards on the miner in degrees C.\n    \"\"\"\n    fluid_temperature: float | None\n    \"\"\"\n    The temperature of the fluid the miner is in.\n    For air cooled devices, this is the environmental temperature, or the first sensor value if available.\n    For immersion devices, this is the immersion fluid temperature, or the first sensor value if available.\n    For hydro devices, this is the water temperature, or the first sensor value if available.\n    \"\"\"\n    wattage: int\n    \"\"\"\n    The total power draw of the miner in watts.\n    \"\"\"\n    wattage_limit: int\n    \"\"\"\n    The maximum power draw of the miner.\n    For devices with auto-tuning, this should be set to the auto-tuning power limit.\n    For devices with power modes or presets, this should be set to the estimated max power of that preset.\n    For all other devices, this should be set to the PSU maximum rated power, or similar reasonable value.\n    \"\"\"\n    is_mining: bool\n    \"\"\"\n    Whether the device is currently mining.\n    \"\"\"\n    messages: list[NimbusMinerMessage]\n    \"\"\"\n    A list of messages to explain the state of the device.\n    \"\"\"\n</code></pre>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.board_temperature_avg","title":"board_temperature_avg  <code>pydantic-field</code>","text":"<pre><code>board_temperature_avg: float\n</code></pre> <p>The average temperature of all boards on the miner in degrees C.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.chip_temperature_avg","title":"chip_temperature_avg  <code>pydantic-field</code>","text":"<pre><code>chip_temperature_avg: float\n</code></pre> <p>The average temperature of all chips on the miner in degrees C.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.control_board","title":"control_board  <code>pydantic-field</code>","text":"<pre><code>control_board: str | None = None\n</code></pre> <p>The control board type of the miner, if applicable. This should be something like <code>\"AMLogic\"</code> or <code>\"H616\"</code>.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.elapsed","title":"elapsed  <code>pydantic-field</code>","text":"<pre><code>elapsed: int\n</code></pre> <p>The time elapsed since the miner started mining in seconds.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.fan_speed","title":"fan_speed  <code>pydantic-field</code>","text":"<pre><code>fan_speed: float = 0\n</code></pre> <p>The fan speed being targeted at this moment. This value should be as a percentage, such as <code>100</code> or <code>50</code> percent speed. For devices which have had fans removed for immersion, set this to <code>0</code>.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.fans","title":"fans  <code>pydantic-field</code>","text":"<pre><code>fans: list[int | None]\n</code></pre> <p>The current RPM of the fans, in order. This must be the same length as the number of fans defined in the <code>hardware</code> command. For fans which are not responding or have failed, use <code>None</code>.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.fluid_temperature","title":"fluid_temperature  <code>pydantic-field</code>","text":"<pre><code>fluid_temperature: float | None\n</code></pre> <p>The temperature of the fluid the miner is in. For air cooled devices, this is the environmental temperature, or the first sensor value if available. For immersion devices, this is the immersion fluid temperature, or the first sensor value if available. For hydro devices, this is the water temperature, or the first sensor value if available.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.is_mining","title":"is_mining  <code>pydantic-field</code>","text":"<pre><code>is_mining: bool\n</code></pre> <p>Whether the device is currently mining.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.mac","title":"mac  <code>pydantic-field</code>","text":"<pre><code>mac: str\n</code></pre> <p>The MAC address or hardware address of the miner. This should be in the format <code>\"11:22:33:44:55:66\"</code>.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.messages","title":"messages  <code>pydantic-field</code>","text":"<pre><code>messages: list[NimbusMinerMessage]\n</code></pre> <p>A list of messages to explain the state of the device.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.mhs_15m","title":"mhs_15m  <code>pydantic-field</code>","text":"<pre><code>mhs_15m: float\n</code></pre> <p>The average hashrate of the miner in MH/s since 15 minutes ago.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.mhs_1m","title":"mhs_1m  <code>pydantic-field</code>","text":"<pre><code>mhs_1m: float\n</code></pre> <p>The average hashrate of the miner in MH/s since 1 minute ago. This should be used as the \"real hashrate\" of the miner by the end user.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.mhs_5m","title":"mhs_5m  <code>pydantic-field</code>","text":"<pre><code>mhs_5m: float\n</code></pre> <p>The average hashrate of the miner in MH/s since 5 minutes ago.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.mhs_avg","title":"mhs_avg  <code>pydantic-field</code>","text":"<pre><code>mhs_avg: float\n</code></pre> <p>The average hashrate of the miner in MH/s since the start of the <code>elapsed</code> timer.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.psu_fan_speed","title":"psu_fan_speed  <code>pydantic-field</code>","text":"<pre><code>psu_fan_speed: float | None = None\n</code></pre> <p>The PSU fan speed being targeted at this moment. This value should be as a percentage, such as <code>100</code> or <code>50</code> percent speed. For devices with no PSU fans, set this to <code>None</code>. For devices which have PSU fans but no communication with them, set this to <code>100</code>.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.psu_fans","title":"psu_fans  <code>pydantic-field</code>","text":"<pre><code>psu_fans: list[int | None]\n</code></pre> <p>The current RPM of the PSU fans, in order. This may be left as an empty list if there are no PSU fan readings.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.serial_number","title":"serial_number  <code>pydantic-field</code>","text":"<pre><code>serial_number: str | None = None\n</code></pre> <p>The serial number of the miner if applicable.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.uptime","title":"uptime  <code>pydantic-field</code>","text":"<pre><code>uptime: int\n</code></pre> <p>The total uptime of the system in seconds.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.wattage","title":"wattage  <code>pydantic-field</code>","text":"<pre><code>wattage: int\n</code></pre> <p>The total power draw of the miner in watts.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryResult.wattage_limit","title":"wattage_limit  <code>pydantic-field</code>","text":"<pre><code>wattage_limit: int\n</code></pre> <p>The maximum power draw of the miner. For devices with auto-tuning, this should be set to the auto-tuning power limit. For devices with power modes or presets, this should be set to the estimated max power of that preset. For all other devices, this should be set to the PSU maximum rated power, or similar reasonable value.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryCommandResult","title":"NimbusSummaryCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Partially CGMiner compatible summary command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusMinerMessage\": {\n      \"description\": \"Miner messages, representing different state information.\",\n      \"properties\": {\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Code\"\n        },\n        \"Message\": {\n          \"title\": \"Message\",\n          \"type\": \"string\"\n        },\n        \"Severity\": {\n          \"$ref\": \"#/$defs/NimbusMinerMessageSeverity\"\n        }\n      },\n      \"required\": [\n        \"When\",\n        \"Message\",\n        \"Severity\"\n      ],\n      \"title\": \"NimbusMinerMessage\",\n      \"type\": \"object\"\n    },\n    \"NimbusMinerMessageSeverity\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"Fatal\",\n        \"Error\",\n        \"Warning\",\n        \"Info\"\n      ],\n      \"title\": \"NimbusMinerMessageSeverity\",\n      \"type\": \"string\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    },\n    \"NimbusSummaryResult\": {\n      \"description\": \"Partially CGMiner compatible mining summary.\\n\\nThis result is partially compatible due to the removal of the majority of the information from the CGMiner standard.\\nAny missing data may be added at the prerogative of the implementor.\",\n      \"properties\": {\n        \"Elapsed\": {\n          \"title\": \"Elapsed\",\n          \"type\": \"integer\"\n        },\n        \"Uptime\": {\n          \"title\": \"Uptime\",\n          \"type\": \"integer\"\n        },\n        \"MHS av\": {\n          \"title\": \"MHS av\",\n          \"type\": \"number\"\n        },\n        \"MHS 1m\": {\n          \"title\": \"MHS 1m\",\n          \"type\": \"number\"\n        },\n        \"MHS 5m\": {\n          \"title\": \"MHS 5m\",\n          \"type\": \"number\"\n        },\n        \"MHS 15m\": {\n          \"title\": \"MHS 15m\",\n          \"type\": \"number\"\n        },\n        \"MAC\": {\n          \"title\": \"MAC\",\n          \"type\": \"string\"\n        },\n        \"Serial Number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Serial Number\"\n        },\n        \"Control Board\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Control Board\"\n        },\n        \"Fans\": {\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ]\n          },\n          \"title\": \"Fans\",\n          \"type\": \"array\"\n        },\n        \"Fan Speed\": {\n          \"default\": 0,\n          \"title\": \"Fan Speed\",\n          \"type\": \"number\"\n        },\n        \"Psu Fans\": {\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ]\n          },\n          \"title\": \"Psu Fans\",\n          \"type\": \"array\"\n        },\n        \"Psu Fan Speed\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Psu Fan Speed\"\n        },\n        \"Chip Temperature Avg\": {\n          \"title\": \"Chip Temperature Avg\",\n          \"type\": \"number\"\n        },\n        \"Board Temperature Avg\": {\n          \"title\": \"Board Temperature Avg\",\n          \"type\": \"number\"\n        },\n        \"Fluid Temperature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Fluid Temperature\"\n        },\n        \"Wattage\": {\n          \"title\": \"Wattage\",\n          \"type\": \"integer\"\n        },\n        \"Wattage Limit\": {\n          \"title\": \"Wattage Limit\",\n          \"type\": \"integer\"\n        },\n        \"Is Mining\": {\n          \"title\": \"Is Mining\",\n          \"type\": \"boolean\"\n        },\n        \"Messages\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NimbusMinerMessage\"\n          },\n          \"title\": \"Messages\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"Elapsed\",\n        \"Uptime\",\n        \"MHS av\",\n        \"MHS 1m\",\n        \"MHS 5m\",\n        \"MHS 15m\",\n        \"MAC\",\n        \"Chip Temperature Avg\",\n        \"Board Temperature Avg\",\n        \"Fluid Temperature\",\n        \"Wattage\",\n        \"Wattage Limit\",\n        \"Is Mining\",\n        \"Messages\"\n      ],\n      \"title\": \"NimbusSummaryResult\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"Partially CGMiner compatible summary command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"SUMMARY\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusSummaryResult\"\n      },\n      \"title\": \"Summary\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"SUMMARY\"\n  ],\n  \"title\": \"NimbusSummaryCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>summary</code>                 (<code>list[NimbusSummaryResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/summary.py</code> <pre><code>class NimbusSummaryCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Partially CGMiner compatible summary command result.\n    \"\"\"\n\n    summary: list[NimbusSummaryResult]\n    \"\"\"\n    The result of the summary command. CGMiner compatible.\n    \"\"\"\n</code></pre>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"summary/#nimbus.responses.summary.NimbusSummaryCommandResult.summary","title":"summary  <code>pydantic-field</code>","text":"<pre><code>summary: list[NimbusSummaryResult]\n</code></pre> <p>The result of the summary command. CGMiner compatible.</p>"},{"location":"version/","title":"Version","text":""},{"location":"version/#example","title":"Example","text":""},{"location":"version/#request","title":"Request","text":"<p>GET request</p> <pre><code>/nimbus/v0/version\n</code></pre> Example ShellPython (HTTPX) <pre><code>curl http://{DEVICE_IP}/nimbus/v0-1-0/version\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/version\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.get(URL)\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>CGMiner style command</p> <pre><code>{'command': 'version'}\n</code></pre> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"version\"}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"version\"})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre>"},{"location":"version/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"I\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"version\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"VERSION\": [\n        {\n            \"Firmware\": \"v0.1.0\",\n            \"API\": \"v0.1.0\",\n            \"Miner\": \"v0.1.0\",\n            \"Type\": \"Nimbus ExampleMiner\",\n            \"Extensions\": [\n                \"tuning.sethashrate\",\n                \"tuning.setpower\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"version/#response-models","title":"Response Models","text":""},{"location":"version/#nimbus.responses.version.NimbusVersionResult","title":"NimbusVersionResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>CGMiner compatible version information.</p> Show JSON schema: <pre><code>{\n  \"description\": \"CGMiner compatible version information.\",\n  \"properties\": {\n    \"Firmware\": {\n      \"title\": \"Firmware\",\n      \"type\": \"string\"\n    },\n    \"API\": {\n      \"default\": \"v0.1.0\",\n      \"title\": \"API\",\n      \"type\": \"string\"\n    },\n    \"Miner\": {\n      \"title\": \"Miner\",\n      \"type\": \"string\"\n    },\n    \"Type\": {\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"Extensions\": {\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Extensions\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"Firmware\",\n    \"Miner\",\n    \"Type\"\n  ],\n  \"title\": \"NimbusVersionResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>firmware</code>                 (<code>str</code>)             </li> <li> <code>api</code>                 (<code>str</code>)             </li> <li> <code>miner</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>extensions</code>                 (<code>list[str]</code>)             </li> </ul> Source code in <code>nimbus/responses/version.py</code> <pre><code>class NimbusVersionResult(BaseModel):\n    \"\"\"\n    CGMiner compatible version information.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    firmware: Annotated[str, BeforeValidator(validate_semantic_version)]\n    \"\"\"\n    The version of the firmware.\n    This value should be denoted as a semantic version, such as `v1.0.0`.\n    \"\"\"\n    api: Annotated[str, BeforeValidator(validate_semantic_version)] = Field(\n        alias=\"API\", default=f\"v{version('nimbus')}\", title=\"API\"\n    )\n    \"\"\"\n    The version of the API, defaults to the nimbus version.\n    This value should be denoted as a semantic version, such as `v1.0.0`.\n    \"\"\"\n    miner: Annotated[str, BeforeValidator(validate_semantic_version)]\n    \"\"\"\n    The version of the mining process, such as CGMiner.\n    This value should be denoted as a semantic version, such as `v1.0.0`.\n    \"\"\"\n    type: str\n    \"\"\"\n    The model name of the device.\n    \"\"\"\n    extensions: list[str] = Field(default_factory=list)\n    \"\"\"\n    All supported extensions, such as `\"tuning.power\"`.\n    \"\"\"\n</code></pre>"},{"location":"version/#nimbus.responses.version.NimbusVersionResult.api","title":"api  <code>pydantic-field</code>","text":"<pre><code>api: str = f'v{version('nimbus')}'\n</code></pre> <p>The version of the API, defaults to the nimbus version. This value should be denoted as a semantic version, such as <code>v1.0.0</code>.</p>"},{"location":"version/#nimbus.responses.version.NimbusVersionResult.extensions","title":"extensions  <code>pydantic-field</code>","text":"<pre><code>extensions: list[str]\n</code></pre> <p>All supported extensions, such as <code>\"tuning.power\"</code>.</p>"},{"location":"version/#nimbus.responses.version.NimbusVersionResult.firmware","title":"firmware  <code>pydantic-field</code>","text":"<pre><code>firmware: str\n</code></pre> <p>The version of the firmware. This value should be denoted as a semantic version, such as <code>v1.0.0</code>.</p>"},{"location":"version/#nimbus.responses.version.NimbusVersionResult.miner","title":"miner  <code>pydantic-field</code>","text":"<pre><code>miner: str\n</code></pre> <p>The version of the mining process, such as CGMiner. This value should be denoted as a semantic version, such as <code>v1.0.0</code>.</p>"},{"location":"version/#nimbus.responses.version.NimbusVersionResult.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: str\n</code></pre> <p>The model name of the device.</p>"},{"location":"version/#nimbus.responses.version.NimbusVersionCommandResult","title":"NimbusVersionCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>CGMiner compatible version command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    },\n    \"NimbusVersionResult\": {\n      \"description\": \"CGMiner compatible version information.\",\n      \"properties\": {\n        \"Firmware\": {\n          \"title\": \"Firmware\",\n          \"type\": \"string\"\n        },\n        \"API\": {\n          \"default\": \"v0.1.0\",\n          \"title\": \"API\",\n          \"type\": \"string\"\n        },\n        \"Miner\": {\n          \"title\": \"Miner\",\n          \"type\": \"string\"\n        },\n        \"Type\": {\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"Extensions\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"title\": \"Extensions\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"Firmware\",\n        \"Miner\",\n        \"Type\"\n      ],\n      \"title\": \"NimbusVersionResult\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"CGMiner compatible version command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"VERSION\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusVersionResult\"\n      },\n      \"title\": \"Version\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"VERSION\"\n  ],\n  \"title\": \"NimbusVersionCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>alias_generator</code>: <code>to_upper</code></li> <li><code>populate_by_name</code>: <code>True</code></li> </ul> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>version</code>                 (<code>list[NimbusVersionResult]</code>)             </li> </ul> Source code in <code>nimbus/responses/version.py</code> <pre><code>class NimbusVersionCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    CGMiner compatible version command result.\n    \"\"\"\n\n    version: list[NimbusVersionResult]\n    \"\"\"\n    The result of the version command. CGMiner compatible.\n    \"\"\"\n</code></pre>"},{"location":"version/#nimbus.responses.version.NimbusVersionCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"version/#nimbus.responses.version.NimbusVersionCommandResult.version","title":"version  <code>pydantic-field</code>","text":"<pre><code>version: list[NimbusVersionResult]\n</code></pre> <p>The result of the version command. CGMiner compatible.</p>"},{"location":"extensions/tuning/sethashrate/","title":"Set Hashrate (Tuning)","text":""},{"location":"extensions/tuning/sethashrate/#example","title":"Example","text":"<p>CGMiner style command</p> <pre><code>{'command': 'sethashrate', 'param': {'target': 15}}\n</code></pre> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"sethashrate\",\"param\":{\"target\":15}}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"sethashrate\",\"param\":{\"target\":15}})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>POST request</p> <p><pre><code>/nimbus/v0/sethashrate\n</code></pre> Body: <pre><code>{\"target\": 15}\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"target\": 15} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/sethashrate\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/sethashrate\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'target': 15})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"extensions/tuning/sethashrate/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"S\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"sethashrate\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"SETHASHRATE\": [\n        {\n            \"Target\": 15\n        }\n    ]\n}\n</code></pre>"},{"location":"extensions/tuning/sethashrate/#parameters","title":"Parameters","text":""},{"location":"extensions/tuning/sethashrate/#nimbus.extensions.requests.tuning.NimbusSetPowerParams","title":"NimbusSetPowerParams  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Set power request parameters.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Set power request parameters.\",\n  \"properties\": {\n    \"target\": {\n      \"title\": \"Target\",\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"target\"\n  ],\n  \"title\": \"NimbusSetPowerParams\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>target</code>                 (<code>int</code>)             </li> </ul> Source code in <code>nimbus/extensions/requests/tuning/setpower.py</code> <pre><code>class NimbusSetPowerParams(BaseModel):\n    \"\"\"\n    Set power request parameters.\n    \"\"\"\n\n    target: int\n    \"\"\"\n    The target power, also sometimes called power limit.\n    \"\"\"\n</code></pre>"},{"location":"extensions/tuning/sethashrate/#nimbus.extensions.requests.tuning.NimbusSetPowerParams.target","title":"target  <code>pydantic-field</code>","text":"<pre><code>target: int\n</code></pre> <p>The target power, also sometimes called power limit.</p>"},{"location":"extensions/tuning/sethashrate/#response-models","title":"Response Models","text":""},{"location":"extensions/tuning/sethashrate/#nimbus.extensions.responses.tuning.NimbusSetPowerResult","title":"NimbusSetPowerResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The result of the set power command.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The result of the set power command.\",\n  \"properties\": {\n    \"Target\": {\n      \"title\": \"Target\",\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"Target\"\n  ],\n  \"title\": \"NimbusSetPowerResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>target</code>                 (<code>int</code>)             </li> </ul> Source code in <code>nimbus/extensions/responses/tuning/setpower.py</code> <pre><code>class NimbusSetPowerResult(BaseModel):\n    \"\"\"\n    The result of the set power command.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    target: int\n    \"\"\"\n    The power target being set.\n    \"\"\"\n</code></pre>"},{"location":"extensions/tuning/sethashrate/#nimbus.extensions.responses.tuning.NimbusSetPowerResult.target","title":"target  <code>pydantic-field</code>","text":"<pre><code>target: int\n</code></pre> <p>The power target being set.</p>"},{"location":"extensions/tuning/sethashrate/#nimbus.extensions.responses.tuning.NimbusSetPowerCommandResult","title":"NimbusSetPowerCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Set power command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusSetPowerResult\": {\n      \"description\": \"The result of the set power command.\",\n      \"properties\": {\n        \"Target\": {\n          \"title\": \"Target\",\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"Target\"\n      ],\n      \"title\": \"NimbusSetPowerResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Set power command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"SETPOWER\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusSetPowerResult\"\n      },\n      \"title\": \"Setpower\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"SETPOWER\"\n  ],\n  \"title\": \"NimbusSetPowerCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>setpower</code>                 (<code>list[NimbusSetPowerResult]</code>)             </li> </ul> Source code in <code>nimbus/extensions/responses/tuning/setpower.py</code> <pre><code>class NimbusSetPowerCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Set power command result.\n    \"\"\"\n\n    setpower: list[NimbusSetPowerResult]\n    \"\"\"\n    The result of the setpower command.\n    \"\"\"\n</code></pre>"},{"location":"extensions/tuning/sethashrate/#nimbus.extensions.responses.tuning.NimbusSetPowerCommandResult.setpower","title":"setpower  <code>pydantic-field</code>","text":"<pre><code>setpower: list[NimbusSetPowerResult]\n</code></pre> <p>The result of the setpower command.</p>"},{"location":"extensions/tuning/sethashrate/#nimbus.extensions.responses.tuning.NimbusSetPowerCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"extensions/tuning/setpower/","title":"Set Power (Tuning)","text":""},{"location":"extensions/tuning/setpower/#example","title":"Example","text":"<p>CGMiner style command</p> <pre><code>{'command': 'setpower', 'param': {'target': 1200}}\n</code></pre> Example ShellPython (Sockets) <pre><code>echo '{\"command\":\"setpower\",\"param\":{\"target\":1200}}' | nc {DEVICE_IP} 4028\n</code></pre> <pre><code>import socket\nimport json\n\n\ndef main():\n    with socket.create_connection(({DEVICE_IP}, 4028)) as sock:\n        cmd_str = json.dumps({\"command\":\"setpower\",\"param\":{\"target\":1200}})\n        sock.sendall(cmd_str.encode(\"utf-8\"))\n\n        response = b\"\"\n        while True:\n            chunk = sock.recv(4096)\n            if not chunk:\n                break\n            response += chunk\n\n    return response.decode(\"utf-8\")\n\n\nif __name__ == \"__main__\":\n    response = main()\n    print(response)\n</code></pre> <p>POST request</p> <p><pre><code>/nimbus/v0/setpower\n</code></pre> Body: <pre><code>{\"target\": 1200}\n</code></pre></p> Example ShellPython (HTTPX) <pre><code>curl \\\n    --request POST \\\n    --data {\"target\": 1200} \\\n    http://{DEVICE_IP}/nimbus/v0-1-0/setpower\n</code></pre> <pre><code>import httpx\nimport asyncio\n\nURL = f\"http://{DEVICE_IP}/nimbus/v0-1-0/setpower\"\n\nasync def main():\n    async with httpx.AsyncClient() as c:\n        result = await c.post(URL, data={'target': 1200})\n    json_data = result.json()\n    print(json_data)\n    return json_data\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"extensions/tuning/setpower/#response","title":"Response","text":"JSON<pre><code>{\n    \"STATUS\": [\n        {\n            \"STATUS\": \"S\",\n            \"When\": 1751301514,\n            \"Code\": 1,\n            \"Msg\": \"nimbus v0.1.0\",\n            \"Description\": \"setpower\",\n            \"Protocol\": \"nimbus v0.1.0\"\n        }\n    ],\n    \"SETPOWER\": [\n        {\n            \"Target\": 1200\n        }\n    ]\n}\n</code></pre>"},{"location":"extensions/tuning/setpower/#parameters","title":"Parameters","text":""},{"location":"extensions/tuning/setpower/#nimbus.extensions.requests.tuning.NimbusSetPowerParams","title":"NimbusSetPowerParams  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Set power request parameters.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Set power request parameters.\",\n  \"properties\": {\n    \"target\": {\n      \"title\": \"Target\",\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"target\"\n  ],\n  \"title\": \"NimbusSetPowerParams\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>target</code>                 (<code>int</code>)             </li> </ul> Source code in <code>nimbus/extensions/requests/tuning/setpower.py</code> <pre><code>class NimbusSetPowerParams(BaseModel):\n    \"\"\"\n    Set power request parameters.\n    \"\"\"\n\n    target: int\n    \"\"\"\n    The target power, also sometimes called power limit.\n    \"\"\"\n</code></pre>"},{"location":"extensions/tuning/setpower/#nimbus.extensions.requests.tuning.NimbusSetPowerParams.target","title":"target  <code>pydantic-field</code>","text":"<pre><code>target: int\n</code></pre> <p>The target power, also sometimes called power limit.</p>"},{"location":"extensions/tuning/setpower/#response-models","title":"Response Models","text":""},{"location":"extensions/tuning/setpower/#nimbus.extensions.responses.tuning.NimbusSetPowerResult","title":"NimbusSetPowerResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The result of the set power command.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The result of the set power command.\",\n  \"properties\": {\n    \"Target\": {\n      \"title\": \"Target\",\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"Target\"\n  ],\n  \"title\": \"NimbusSetPowerResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>target</code>                 (<code>int</code>)             </li> </ul> Source code in <code>nimbus/extensions/responses/tuning/setpower.py</code> <pre><code>class NimbusSetPowerResult(BaseModel):\n    \"\"\"\n    The result of the set power command.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    target: int\n    \"\"\"\n    The power target being set.\n    \"\"\"\n</code></pre>"},{"location":"extensions/tuning/setpower/#nimbus.extensions.responses.tuning.NimbusSetPowerResult.target","title":"target  <code>pydantic-field</code>","text":"<pre><code>target: int\n</code></pre> <p>The power target being set.</p>"},{"location":"extensions/tuning/setpower/#nimbus.extensions.responses.tuning.NimbusSetPowerCommandResult","title":"NimbusSetPowerCommandResult  <code>pydantic-model</code>","text":"<p>               Bases: <code>NimbusBaseCommandResult</code></p> <p>Set power command result.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusCommandStatus\": {\n      \"description\": \"CGMiner compatible status information.\",\n      \"properties\": {\n        \"STATUS\": {\n          \"$ref\": \"#/$defs/NimbusStatusCode\"\n        },\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"default\": 1,\n          \"title\": \"Code\",\n          \"type\": \"integer\"\n        },\n        \"Msg\": {\n          \"title\": \"Msg\",\n          \"type\": \"string\"\n        },\n        \"Description\": {\n          \"title\": \"Description\",\n          \"type\": \"string\"\n        },\n        \"Protocol\": {\n          \"default\": \"nimbus v0.1.0\",\n          \"title\": \"Protocol\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"STATUS\",\n        \"Msg\",\n        \"Description\"\n      ],\n      \"title\": \"NimbusCommandStatus\",\n      \"type\": \"object\"\n    },\n    \"NimbusSetPowerResult\": {\n      \"description\": \"The result of the set power command.\",\n      \"properties\": {\n        \"Target\": {\n          \"title\": \"Target\",\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"Target\"\n      ],\n      \"title\": \"NimbusSetPowerResult\",\n      \"type\": \"object\"\n    },\n    \"NimbusStatusCode\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"I\",\n        \"W\",\n        \"S\",\n        \"E\",\n        \"F\"\n      ],\n      \"title\": \"NimbusStatusCode\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Set power command result.\",\n  \"properties\": {\n    \"STATUS\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusCommandStatus\"\n      },\n      \"title\": \"Status\",\n      \"type\": \"array\"\n    },\n    \"SETPOWER\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusSetPowerResult\"\n      },\n      \"title\": \"Setpower\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"STATUS\",\n    \"SETPOWER\"\n  ],\n  \"title\": \"NimbusSetPowerCommandResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>status</code>                 (<code>list[NimbusCommandStatus]</code>)             </li> <li> <code>setpower</code>                 (<code>list[NimbusSetPowerResult]</code>)             </li> </ul> Source code in <code>nimbus/extensions/responses/tuning/setpower.py</code> <pre><code>class NimbusSetPowerCommandResult(NimbusBaseCommandResult):\n    \"\"\"\n    Set power command result.\n    \"\"\"\n\n    setpower: list[NimbusSetPowerResult]\n    \"\"\"\n    The result of the setpower command.\n    \"\"\"\n</code></pre>"},{"location":"extensions/tuning/setpower/#nimbus.extensions.responses.tuning.NimbusSetPowerCommandResult.setpower","title":"setpower  <code>pydantic-field</code>","text":"<pre><code>setpower: list[NimbusSetPowerResult]\n</code></pre> <p>The result of the setpower command.</p>"},{"location":"extensions/tuning/setpower/#nimbus.extensions.responses.tuning.NimbusSetPowerCommandResult.status","title":"status  <code>pydantic-field</code>","text":"<pre><code>status: list[NimbusCommandStatus]\n</code></pre> <p>A status result for the command being sent.  CGMiner compatible.</p>"},{"location":"push/","title":"Getting Started","text":""},{"location":"push/#the-push-model","title":"The push model","text":"<p>Nimbus implements a data push model in addition to the more standard RPC style API. This model is designed to be sent to a webhook using an HTTP POST request.</p>"},{"location":"push/data/","title":"Data","text":""},{"location":"push/data/#push-data","title":"Push Data","text":""},{"location":"push/data/#nimbus.push.data.NimbusPushData","title":"NimbusPushData  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Push model for nimbus.</p> <p>This model is the data format for pushing data to a webhook.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusHashrate\": {\n      \"properties\": {\n        \"rate\": {\n          \"default\": 0,\n          \"title\": \"Rate\",\n          \"type\": \"number\"\n        },\n        \"unit\": {\n          \"$ref\": \"#/$defs/NimbusHashrateUnit\",\n          \"default\": 1\n        }\n      },\n      \"title\": \"NimbusHashrate\",\n      \"type\": \"object\"\n    },\n    \"NimbusHashrateUnit\": {\n      \"enum\": [\n        1,\n        1000,\n        1000000,\n        1000000000,\n        1000000000000,\n        1000000000000000,\n        1000000000000000000,\n        1000000000000000000000,\n        1\n      ],\n      \"title\": \"NimbusHashrateUnit\",\n      \"type\": \"integer\"\n    },\n    \"NimbusMinerMessage\": {\n      \"description\": \"Miner messages, representing different state information.\",\n      \"properties\": {\n        \"When\": {\n          \"format\": \"date-time\",\n          \"title\": \"When\",\n          \"type\": \"string\"\n        },\n        \"Code\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Code\"\n        },\n        \"Message\": {\n          \"title\": \"Message\",\n          \"type\": \"string\"\n        },\n        \"Severity\": {\n          \"$ref\": \"#/$defs/NimbusMinerMessageSeverity\"\n        }\n      },\n      \"required\": [\n        \"When\",\n        \"Message\",\n        \"Severity\"\n      ],\n      \"title\": \"NimbusMinerMessage\",\n      \"type\": \"object\"\n    },\n    \"NimbusMinerMessageSeverity\": {\n      \"description\": \"CGMiner compatible status code.\",\n      \"enum\": [\n        \"Fatal\",\n        \"Error\",\n        \"Warning\",\n        \"Info\"\n      ],\n      \"title\": \"NimbusMinerMessageSeverity\",\n      \"type\": \"string\"\n    },\n    \"NimbusPushHardware\": {\n      \"description\": \"Hardware information for the push model.\",\n      \"properties\": {\n        \"Make\": {\n          \"title\": \"Make\",\n          \"type\": \"string\"\n        },\n        \"Model\": {\n          \"title\": \"Model\",\n          \"type\": \"string\"\n        },\n        \"Chips\": {\n          \"title\": \"Chips\",\n          \"type\": \"integer\"\n        },\n        \"Cores\": {\n          \"title\": \"Cores\",\n          \"type\": \"integer\"\n        },\n        \"Boards\": {\n          \"title\": \"Boards\",\n          \"type\": \"integer\"\n        },\n        \"Fans\": {\n          \"title\": \"Fans\",\n          \"type\": \"integer\"\n        },\n        \"Board Chips\": {\n          \"items\": {\n            \"type\": \"integer\"\n          },\n          \"title\": \"Board Chips\",\n          \"type\": \"array\"\n        },\n        \"Algo\": {\n          \"title\": \"Algo\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"Make\",\n        \"Model\",\n        \"Chips\",\n        \"Cores\",\n        \"Boards\",\n        \"Fans\",\n        \"Board Chips\",\n        \"Algo\"\n      ],\n      \"title\": \"NimbusPushHardware\",\n      \"type\": \"object\"\n    },\n    \"NimbusPushHashboards\": {\n      \"description\": \"Hashboard data for the push model.\",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"integer\"\n        },\n        \"Chips\": {\n          \"title\": \"Chips\",\n          \"type\": \"integer\"\n        },\n        \"Cores\": {\n          \"title\": \"Cores\",\n          \"type\": \"integer\"\n        },\n        \"Driver\": {\n          \"title\": \"Driver\",\n          \"type\": \"string\"\n        },\n        \"Model\": {\n          \"title\": \"Model\",\n          \"type\": \"string\"\n        },\n        \"Working Chips\": {\n          \"title\": \"Working Chips\",\n          \"type\": \"integer\"\n        },\n        \"Expected Hashrate\": {\n          \"title\": \"Expected Hashrate\",\n          \"type\": \"number\"\n        },\n        \"Serial Number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Serial Number\"\n        },\n        \"Voltage\": {\n          \"title\": \"Voltage\",\n          \"type\": \"number\"\n        },\n        \"Frequency\": {\n          \"title\": \"Frequency\",\n          \"type\": \"number\"\n        },\n        \"Wattage\": {\n          \"title\": \"Wattage\",\n          \"type\": \"integer\"\n        },\n        \"Wattage Limit\": {\n          \"title\": \"Wattage Limit\",\n          \"type\": \"integer\"\n        },\n        \"Hashrate 1M\": {\n          \"$ref\": \"#/$defs/NimbusHashrate\"\n        },\n        \"Hashrate 5M\": {\n          \"$ref\": \"#/$defs/NimbusHashrate\"\n        },\n        \"Hashrate 15M\": {\n          \"$ref\": \"#/$defs/NimbusHashrate\"\n        },\n        \"Active\": {\n          \"title\": \"Active\",\n          \"type\": \"boolean\"\n        },\n        \"pcb_temperature\": {\n          \"title\": \"Pcb Temperature\",\n          \"type\": \"number\"\n        },\n        \"Intake Temperature\": {\n          \"title\": \"Intake Temperature\",\n          \"type\": \"number\"\n        },\n        \"Outlet Temperature\": {\n          \"title\": \"Outlet Temperature\",\n          \"type\": \"number\"\n        },\n        \"Tuned\": {\n          \"title\": \"Tuned\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"Chips\",\n        \"Cores\",\n        \"Driver\",\n        \"Model\",\n        \"Working Chips\",\n        \"Expected Hashrate\",\n        \"Voltage\",\n        \"Frequency\",\n        \"Wattage\",\n        \"Wattage Limit\",\n        \"Hashrate 1M\",\n        \"Hashrate 5M\",\n        \"Hashrate 15M\",\n        \"Active\",\n        \"pcb_temperature\",\n        \"Intake Temperature\",\n        \"Outlet Temperature\",\n        \"Tuned\"\n      ],\n      \"title\": \"NimbusPushHashboards\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"Push model for nimbus.\\n\\nThis model is the data format for pushing data to a webhook.\",\n  \"properties\": {\n    \"Protocol\": {\n      \"default\": \"nimbus v0.1.0\",\n      \"title\": \"Protocol\",\n      \"type\": \"string\"\n    },\n    \"When\": {\n      \"format\": \"date-time\",\n      \"title\": \"When\",\n      \"type\": \"string\"\n    },\n    \"IP\": {\n      \"title\": \"IP\",\n      \"type\": \"string\"\n    },\n    \"MAC\": {\n      \"title\": \"MAC\",\n      \"type\": \"string\"\n    },\n    \"Hardware\": {\n      \"$ref\": \"#/$defs/NimbusPushHardware\"\n    },\n    \"Serial Number\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Serial Number\"\n    },\n    \"Control Board\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Control Board\"\n    },\n    \"API\": {\n      \"default\": \"v0.1.0\",\n      \"title\": \"API\",\n      \"type\": \"string\"\n    },\n    \"Miner Version\": {\n      \"title\": \"Miner Version\",\n      \"type\": \"string\"\n    },\n    \"Firmware Version\": {\n      \"title\": \"Firmware Version\",\n      \"type\": \"string\"\n    },\n    \"Extensions\": {\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Extensions\",\n      \"type\": \"array\"\n    },\n    \"Hashboards\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusPushHashboards\"\n      },\n      \"title\": \"Hashboards\",\n      \"type\": \"array\"\n    },\n    \"Wattage\": {\n      \"title\": \"Wattage\",\n      \"type\": \"integer\"\n    },\n    \"Wattage Limit\": {\n      \"title\": \"Wattage Limit\",\n      \"type\": \"integer\"\n    },\n    \"Fluid Temperature\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Fluid Temperature\"\n    },\n    \"Fans\": {\n      \"items\": {\n        \"anyOf\": [\n          {\n            \"type\": \"integer\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"title\": \"Fans\",\n      \"type\": \"array\"\n    },\n    \"Fan Speed\": {\n      \"default\": 0,\n      \"title\": \"Fan Speed\",\n      \"type\": \"number\"\n    },\n    \"Psu Fans\": {\n      \"items\": {\n        \"anyOf\": [\n          {\n            \"type\": \"integer\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"title\": \"Psu Fans\",\n      \"type\": \"array\"\n    },\n    \"Psu Fan Speed\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Psu Fan Speed\"\n    },\n    \"Is Mining\": {\n      \"title\": \"Is Mining\",\n      \"type\": \"boolean\"\n    },\n    \"Messages\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NimbusMinerMessage\"\n      },\n      \"title\": \"Messages\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"IP\",\n    \"MAC\",\n    \"Hardware\",\n    \"Miner Version\",\n    \"Firmware Version\",\n    \"Hashboards\",\n    \"Wattage\",\n    \"Wattage Limit\",\n    \"Fluid Temperature\",\n    \"Is Mining\",\n    \"Messages\"\n  ],\n  \"title\": \"NimbusPushData\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>protocol</code>                 (<code>str</code>)             </li> <li> <code>when</code>                 (<code>datetime</code>)             </li> <li> <code>ip</code>                 (<code>str</code>)             </li> <li> <code>mac</code>                 (<code>str</code>)             </li> <li> <code>hardware</code>                 (<code>NimbusPushHardware</code>)             </li> <li> <code>serial_number</code>                 (<code>str | None</code>)             </li> <li> <code>control_board</code>                 (<code>str | None</code>)             </li> <li> <code>api_version</code>                 (<code>str</code>)             </li> <li> <code>miner_version</code>                 (<code>str</code>)             </li> <li> <code>firmware_version</code>                 (<code>str</code>)             </li> <li> <code>extensions</code>                 (<code>list[str]</code>)             </li> <li> <code>hashboards</code>                 (<code>list[NimbusPushHashboards]</code>)             </li> <li> <code>wattage</code>                 (<code>int</code>)             </li> <li> <code>wattage_limit</code>                 (<code>int</code>)             </li> <li> <code>fluid_temperature</code>                 (<code>float | None</code>)             </li> <li> <code>fans</code>                 (<code>list[int | None]</code>)             </li> <li> <code>fan_speed</code>                 (<code>float</code>)             </li> <li> <code>psu_fans</code>                 (<code>list[int | None]</code>)             </li> <li> <code>psu_fan_speed</code>                 (<code>float | None</code>)             </li> <li> <code>is_mining</code>                 (<code>bool</code>)             </li> <li> <code>messages</code>                 (<code>list[NimbusMinerMessage]</code>)             </li> </ul> Source code in <code>nimbus/push/data/__init__.py</code> <pre><code>class NimbusPushData(BaseModel):\n    \"\"\"\n    Push model for nimbus.\n\n    This model is the data format for pushing data to a webhook.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    protocol: str = f\"nimbus v{version('nimbus')}\"\n    \"\"\"\n    The protocol and version being used by this device.\n    Defaults to `nimbus v{version}`, but may be set to an alternate protocol if desired.\n    For custom protocols which fully implement a version of `nimbus` and only add functionality, this should be suffixed, such as `nimbus v{version}.cgminer-1`\n    \"\"\"\n    when: Annotated[datetime, BeforeValidator(parse_unix_timestamp)] = Field(default_factory=lambda: datetime.now(UTC))\n    \"\"\"\n    UNIX timestamp in seconds.\n    \"\"\"\n    ip: str = Field(alias=\"IP\", title=\"IP\")\n    \"\"\"\n    The current IP address of the device.\n    \"\"\"\n    mac: str = Field(alias=\"MAC\", title=\"MAC\")\n    \"\"\"\n    The MAC address of the device.\n    \"\"\"\n    hardware: NimbusPushHardware\n    \"\"\"\n    Hardware information for the device.\n    \"\"\"\n    serial_number: str | None = None\n    \"\"\"\n    The serial number of the miner if applicable.\n    \"\"\"\n    control_board: str | None = None\n    \"\"\"\n    The control board type of the miner, if applicable.\n    This should be something like `\"AMLogic\"` or `\"H616\"`.\n    \"\"\"\n    api_version: Annotated[str, BeforeValidator(validate_semantic_version)] = Field(\n        alias=\"API\", default=f\"v{version('nimbus')}\", title=\"API\"\n    )\n    \"\"\"\n    The version of the API, defaults to the nimbus version.\n    This value should be denoted as a semantic version, such as `v1.0.0`.\n    \"\"\"\n    miner_version: Annotated[str, BeforeValidator(validate_semantic_version)]\n    \"\"\"\n    The version of the mining process, such as CGMiner.\n    This value should be denoted as a semantic version, such as `v1.0.0`.\n    \"\"\"\n    firmware_version: Annotated[str, BeforeValidator(validate_semantic_version)]\n    \"\"\"\n    The version of the firmware.\n    This value should be denoted as a semantic version, such as `v1.0.0`.\n    \"\"\"\n    extensions: list[str] = Field(default_factory=list)\n    \"\"\"\n    All supported extensions, such as `\"tuning.power\"`.\n    \"\"\"\n    hashboards: list[NimbusPushHashboards]\n    \"\"\"\n    Hashboard data for the device.\n    \"\"\"\n    wattage: int\n    \"\"\"\n    The total power draw of the device in watts.\n    \"\"\"\n    wattage_limit: int\n    \"\"\"\n    The maximum power draw of the device.\n    For devices with auto-tuning, this should be set to the auto-tuning power limit.\n    For devices with power modes or presets, this should be set to the estimated max power of that preset.\n    For all other devices, this should be set to the PSU maximum rated power, or similar reasonable value.\n    \"\"\"\n    fluid_temperature: float | None\n    \"\"\"\n    The temperature of the fluid the device is in.\n    For air cooled devices, this is the environmental temperature, or the first sensor value if available.\n    For immersion devices, this is the immersion fluid temperature, or the first sensor value if available.\n    For hydro devices, this is the water temperature, or the first sensor value if available.\n    \"\"\"\n    fans: list[int | None] = Field(default_factory=list)\n    \"\"\"\n    The current RPM of the fans, in order.\n    This must be the same length as the number of fans defined in the `hardware` command.\n    For fans which are not responding or have failed, use `None`.\n    \"\"\"\n    fan_speed: float = 0\n    \"\"\"\n    The fan speed being targeted at this moment.\n    This value should be as a percentage, such as `100` or `50` percent speed.\n    For devices which have had fans removed for immersion, set this to `0`.\n    \"\"\"\n    psu_fans: list[int | None] = Field(default_factory=list)\n    \"\"\"\n    The current RPM of the PSU fans, in order.\n    This may be left as an empty list if there are no PSU fan readings.\n    \"\"\"\n    psu_fan_speed: float | None = None\n    \"\"\"\n    The PSU fan speed being targeted at this moment.\n    This value should be as a percentage, such as `100` or `50` percent speed.\n    For devices with no PSU fans, set this to `None`.\n    For devices which have PSU fans but no communication with them, set this to `100`.\n    \"\"\"\n    is_mining: bool\n    \"\"\"\n    Whether the device is currently mining.\n    \"\"\"\n    messages: list[NimbusMinerMessage]\n    \"\"\"\n    A list of messages to explain the state of the device.\n    \"\"\"\n\n    @field_serializer(\"when\")\n    def serialize_when(self, when: datetime, _info) -&gt; int:\n        return int(when.timestamp())\n</code></pre>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.api_version","title":"api_version  <code>pydantic-field</code>","text":"<pre><code>api_version: str = f'v{version('nimbus')}'\n</code></pre> <p>The version of the API, defaults to the nimbus version. This value should be denoted as a semantic version, such as <code>v1.0.0</code>.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.control_board","title":"control_board  <code>pydantic-field</code>","text":"<pre><code>control_board: str | None = None\n</code></pre> <p>The control board type of the miner, if applicable. This should be something like <code>\"AMLogic\"</code> or <code>\"H616\"</code>.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.extensions","title":"extensions  <code>pydantic-field</code>","text":"<pre><code>extensions: list[str]\n</code></pre> <p>All supported extensions, such as <code>\"tuning.power\"</code>.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.fan_speed","title":"fan_speed  <code>pydantic-field</code>","text":"<pre><code>fan_speed: float = 0\n</code></pre> <p>The fan speed being targeted at this moment. This value should be as a percentage, such as <code>100</code> or <code>50</code> percent speed. For devices which have had fans removed for immersion, set this to <code>0</code>.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.fans","title":"fans  <code>pydantic-field</code>","text":"<pre><code>fans: list[int | None]\n</code></pre> <p>The current RPM of the fans, in order. This must be the same length as the number of fans defined in the <code>hardware</code> command. For fans which are not responding or have failed, use <code>None</code>.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.firmware_version","title":"firmware_version  <code>pydantic-field</code>","text":"<pre><code>firmware_version: str\n</code></pre> <p>The version of the firmware. This value should be denoted as a semantic version, such as <code>v1.0.0</code>.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.fluid_temperature","title":"fluid_temperature  <code>pydantic-field</code>","text":"<pre><code>fluid_temperature: float | None\n</code></pre> <p>The temperature of the fluid the device is in. For air cooled devices, this is the environmental temperature, or the first sensor value if available. For immersion devices, this is the immersion fluid temperature, or the first sensor value if available. For hydro devices, this is the water temperature, or the first sensor value if available.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.hardware","title":"hardware  <code>pydantic-field</code>","text":"<pre><code>hardware: NimbusPushHardware\n</code></pre> <p>Hardware information for the device.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.hashboards","title":"hashboards  <code>pydantic-field</code>","text":"<pre><code>hashboards: list[NimbusPushHashboards]\n</code></pre> <p>Hashboard data for the device.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.ip","title":"ip  <code>pydantic-field</code>","text":"<pre><code>ip: str\n</code></pre> <p>The current IP address of the device.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.is_mining","title":"is_mining  <code>pydantic-field</code>","text":"<pre><code>is_mining: bool\n</code></pre> <p>Whether the device is currently mining.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.mac","title":"mac  <code>pydantic-field</code>","text":"<pre><code>mac: str\n</code></pre> <p>The MAC address of the device.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.messages","title":"messages  <code>pydantic-field</code>","text":"<pre><code>messages: list[NimbusMinerMessage]\n</code></pre> <p>A list of messages to explain the state of the device.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.miner_version","title":"miner_version  <code>pydantic-field</code>","text":"<pre><code>miner_version: str\n</code></pre> <p>The version of the mining process, such as CGMiner. This value should be denoted as a semantic version, such as <code>v1.0.0</code>.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.protocol","title":"protocol  <code>pydantic-field</code>","text":"<pre><code>protocol: str = f'nimbus v{version('nimbus')}'\n</code></pre> <p>The protocol and version being used by this device. Defaults to <code>nimbus v{version}</code>, but may be set to an alternate protocol if desired. For custom protocols which fully implement a version of <code>nimbus</code> and only add functionality, this should be suffixed, such as <code>nimbus v{version}.cgminer-1</code></p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.psu_fan_speed","title":"psu_fan_speed  <code>pydantic-field</code>","text":"<pre><code>psu_fan_speed: float | None = None\n</code></pre> <p>The PSU fan speed being targeted at this moment. This value should be as a percentage, such as <code>100</code> or <code>50</code> percent speed. For devices with no PSU fans, set this to <code>None</code>. For devices which have PSU fans but no communication with them, set this to <code>100</code>.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.psu_fans","title":"psu_fans  <code>pydantic-field</code>","text":"<pre><code>psu_fans: list[int | None]\n</code></pre> <p>The current RPM of the PSU fans, in order. This may be left as an empty list if there are no PSU fan readings.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.serial_number","title":"serial_number  <code>pydantic-field</code>","text":"<pre><code>serial_number: str | None = None\n</code></pre> <p>The serial number of the miner if applicable.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.wattage","title":"wattage  <code>pydantic-field</code>","text":"<pre><code>wattage: int\n</code></pre> <p>The total power draw of the device in watts.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.wattage_limit","title":"wattage_limit  <code>pydantic-field</code>","text":"<pre><code>wattage_limit: int\n</code></pre> <p>The maximum power draw of the device. For devices with auto-tuning, this should be set to the auto-tuning power limit. For devices with power modes or presets, this should be set to the estimated max power of that preset. For all other devices, this should be set to the PSU maximum rated power, or similar reasonable value.</p>"},{"location":"push/data/#nimbus.push.data.NimbusPushData.when","title":"when  <code>pydantic-field</code>","text":"<pre><code>when: datetime\n</code></pre> <p>UNIX timestamp in seconds.</p>"},{"location":"push/data/#nimbus.push.data.hardware.NimbusPushHardware","title":"NimbusPushHardware  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Hardware information for the push model.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Hardware information for the push model.\",\n  \"properties\": {\n    \"Make\": {\n      \"title\": \"Make\",\n      \"type\": \"string\"\n    },\n    \"Model\": {\n      \"title\": \"Model\",\n      \"type\": \"string\"\n    },\n    \"Chips\": {\n      \"title\": \"Chips\",\n      \"type\": \"integer\"\n    },\n    \"Cores\": {\n      \"title\": \"Cores\",\n      \"type\": \"integer\"\n    },\n    \"Boards\": {\n      \"title\": \"Boards\",\n      \"type\": \"integer\"\n    },\n    \"Fans\": {\n      \"title\": \"Fans\",\n      \"type\": \"integer\"\n    },\n    \"Board Chips\": {\n      \"items\": {\n        \"type\": \"integer\"\n      },\n      \"title\": \"Board Chips\",\n      \"type\": \"array\"\n    },\n    \"Algo\": {\n      \"title\": \"Algo\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"Make\",\n    \"Model\",\n    \"Chips\",\n    \"Cores\",\n    \"Boards\",\n    \"Fans\",\n    \"Board Chips\",\n    \"Algo\"\n  ],\n  \"title\": \"NimbusPushHardware\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>make</code>                 (<code>str</code>)             </li> <li> <code>model</code>                 (<code>str</code>)             </li> <li> <code>chips</code>                 (<code>int</code>)             </li> <li> <code>cores</code>                 (<code>int</code>)             </li> <li> <code>boards</code>                 (<code>int</code>)             </li> <li> <code>fans</code>                 (<code>int</code>)             </li> <li> <code>board_chips</code>                 (<code>list[int]</code>)             </li> <li> <code>algo</code>                 (<code>str</code>)             </li> </ul> Source code in <code>nimbus/push/data/hardware.py</code> <pre><code>class NimbusPushHardware(BaseModel):\n    \"\"\"\n    Hardware information for the push model.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    make: str\n    \"\"\"\n    The make of the miner.\n    This should be something like `\"Antminer\"`, `\"Whatsminer\"`, or `\"Avalonminer\"`.\n    \"\"\"\n    model: str\n    \"\"\"\n    The model of the miner.\n    This should be something like `\"S9\"`, `\"M30S++VH30\"`, or `\"A1246\"`.\n    \"\"\"\n    chips: int\n    \"\"\"\n    The total expected number of chips across all boards.\n    \"\"\"\n    cores: int\n    \"\"\"\n    The total expected number of core across all chips on all boards.\n    \"\"\"\n    boards: int\n    \"\"\"\n    The total expected number of boards.\n    \"\"\"\n    fans: int\n    \"\"\"\n    The total expected number of fans.\n    \"\"\"\n    board_chips: list[int]\n    \"\"\"\n    The chips expected on each board, in order by board ID.\n    This will be the same chip count for all boards for most devices, but some may have different chip counts per board.\n    This should be somthing like `[63, 63, 63]`.\n    \"\"\"\n    algo: str\n    \"\"\"\n    The algorithm this device is mining.\n    This should be something like `\"SHA256\"`.\n    \"\"\"\n</code></pre>"},{"location":"push/data/#nimbus.push.data.hardware.NimbusPushHardware.algo","title":"algo  <code>pydantic-field</code>","text":"<pre><code>algo: str\n</code></pre> <p>The algorithm this device is mining. This should be something like <code>\"SHA256\"</code>.</p>"},{"location":"push/data/#nimbus.push.data.hardware.NimbusPushHardware.board_chips","title":"board_chips  <code>pydantic-field</code>","text":"<pre><code>board_chips: list[int]\n</code></pre> <p>The chips expected on each board, in order by board ID. This will be the same chip count for all boards for most devices, but some may have different chip counts per board. This should be somthing like <code>[63, 63, 63]</code>.</p>"},{"location":"push/data/#nimbus.push.data.hardware.NimbusPushHardware.boards","title":"boards  <code>pydantic-field</code>","text":"<pre><code>boards: int\n</code></pre> <p>The total expected number of boards.</p>"},{"location":"push/data/#nimbus.push.data.hardware.NimbusPushHardware.chips","title":"chips  <code>pydantic-field</code>","text":"<pre><code>chips: int\n</code></pre> <p>The total expected number of chips across all boards.</p>"},{"location":"push/data/#nimbus.push.data.hardware.NimbusPushHardware.cores","title":"cores  <code>pydantic-field</code>","text":"<pre><code>cores: int\n</code></pre> <p>The total expected number of core across all chips on all boards.</p>"},{"location":"push/data/#nimbus.push.data.hardware.NimbusPushHardware.fans","title":"fans  <code>pydantic-field</code>","text":"<pre><code>fans: int\n</code></pre> <p>The total expected number of fans.</p>"},{"location":"push/data/#nimbus.push.data.hardware.NimbusPushHardware.make","title":"make  <code>pydantic-field</code>","text":"<pre><code>make: str\n</code></pre> <p>The make of the miner. This should be something like <code>\"Antminer\"</code>, <code>\"Whatsminer\"</code>, or <code>\"Avalonminer\"</code>.</p>"},{"location":"push/data/#nimbus.push.data.hardware.NimbusPushHardware.model","title":"model  <code>pydantic-field</code>","text":"<pre><code>model: str\n</code></pre> <p>The model of the miner. This should be something like <code>\"S9\"</code>, <code>\"M30S++VH30\"</code>, or <code>\"A1246\"</code>.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards","title":"NimbusPushHashboards  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Hashboard data for the push model.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusHashrate\": {\n      \"properties\": {\n        \"rate\": {\n          \"default\": 0,\n          \"title\": \"Rate\",\n          \"type\": \"number\"\n        },\n        \"unit\": {\n          \"$ref\": \"#/$defs/NimbusHashrateUnit\",\n          \"default\": 1\n        }\n      },\n      \"title\": \"NimbusHashrate\",\n      \"type\": \"object\"\n    },\n    \"NimbusHashrateUnit\": {\n      \"enum\": [\n        1,\n        1000,\n        1000000,\n        1000000000,\n        1000000000000,\n        1000000000000000,\n        1000000000000000000,\n        1000000000000000000000,\n        1\n      ],\n      \"title\": \"NimbusHashrateUnit\",\n      \"type\": \"integer\"\n    }\n  },\n  \"description\": \"Hashboard data for the push model.\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"integer\"\n    },\n    \"Chips\": {\n      \"title\": \"Chips\",\n      \"type\": \"integer\"\n    },\n    \"Cores\": {\n      \"title\": \"Cores\",\n      \"type\": \"integer\"\n    },\n    \"Driver\": {\n      \"title\": \"Driver\",\n      \"type\": \"string\"\n    },\n    \"Model\": {\n      \"title\": \"Model\",\n      \"type\": \"string\"\n    },\n    \"Working Chips\": {\n      \"title\": \"Working Chips\",\n      \"type\": \"integer\"\n    },\n    \"Expected Hashrate\": {\n      \"title\": \"Expected Hashrate\",\n      \"type\": \"number\"\n    },\n    \"Serial Number\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Serial Number\"\n    },\n    \"Voltage\": {\n      \"title\": \"Voltage\",\n      \"type\": \"number\"\n    },\n    \"Frequency\": {\n      \"title\": \"Frequency\",\n      \"type\": \"number\"\n    },\n    \"Wattage\": {\n      \"title\": \"Wattage\",\n      \"type\": \"integer\"\n    },\n    \"Wattage Limit\": {\n      \"title\": \"Wattage Limit\",\n      \"type\": \"integer\"\n    },\n    \"Hashrate 1M\": {\n      \"$ref\": \"#/$defs/NimbusHashrate\"\n    },\n    \"Hashrate 5M\": {\n      \"$ref\": \"#/$defs/NimbusHashrate\"\n    },\n    \"Hashrate 15M\": {\n      \"$ref\": \"#/$defs/NimbusHashrate\"\n    },\n    \"Active\": {\n      \"title\": \"Active\",\n      \"type\": \"boolean\"\n    },\n    \"pcb_temperature\": {\n      \"title\": \"Pcb Temperature\",\n      \"type\": \"number\"\n    },\n    \"Intake Temperature\": {\n      \"title\": \"Intake Temperature\",\n      \"type\": \"number\"\n    },\n    \"Outlet Temperature\": {\n      \"title\": \"Outlet Temperature\",\n      \"type\": \"number\"\n    },\n    \"Tuned\": {\n      \"title\": \"Tuned\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"Chips\",\n    \"Cores\",\n    \"Driver\",\n    \"Model\",\n    \"Working Chips\",\n    \"Expected Hashrate\",\n    \"Voltage\",\n    \"Frequency\",\n    \"Wattage\",\n    \"Wattage Limit\",\n    \"Hashrate 1M\",\n    \"Hashrate 5M\",\n    \"Hashrate 15M\",\n    \"Active\",\n    \"pcb_temperature\",\n    \"Intake Temperature\",\n    \"Outlet Temperature\",\n    \"Tuned\"\n  ],\n  \"title\": \"NimbusPushHashboards\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>populate_by_name</code>: <code>True</code></li> <li><code>alias_generator</code>: <code>to_cgminer</code></li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>chips</code>                 (<code>int</code>)             </li> <li> <code>cores</code>                 (<code>int</code>)             </li> <li> <code>driver</code>                 (<code>str</code>)             </li> <li> <code>model</code>                 (<code>str</code>)             </li> <li> <code>working_chips</code>                 (<code>int</code>)             </li> <li> <code>expected_hashrate</code>                 (<code>float</code>)             </li> <li> <code>serial_number</code>                 (<code>str | None</code>)             </li> <li> <code>voltage</code>                 (<code>float</code>)             </li> <li> <code>frequency</code>                 (<code>float</code>)             </li> <li> <code>wattage</code>                 (<code>int</code>)             </li> <li> <code>wattage_limit</code>                 (<code>int</code>)             </li> <li> <code>hashrate_1m</code>                 (<code>NimbusHashrate</code>)             </li> <li> <code>hashrate_5m</code>                 (<code>NimbusHashrate</code>)             </li> <li> <code>hashrate_15m</code>                 (<code>NimbusHashrate</code>)             </li> <li> <code>active</code>                 (<code>bool</code>)             </li> <li> <code>pcb_temperature</code>                 (<code>float</code>)             </li> <li> <code>intake_temperature</code>                 (<code>float</code>)             </li> <li> <code>outlet_temperature</code>                 (<code>float</code>)             </li> <li> <code>tuned</code>                 (<code>bool</code>)             </li> </ul> Source code in <code>nimbus/push/data/hashboards.py</code> <pre><code>class NimbusPushHashboards(BaseModel):\n    \"\"\"\n    Hashboard data for the push model.\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_cgminer)\n\n    id: int = Field(\n        serialization_alias=\"ID\",\n        validation_alias=AliasChoices(\"id\", \"ID\"),\n    )\n    \"\"\"\n    The board ID, indexed from 0.\n    For example, for an S9 with connectors labeled 6/7/8, 6 is 0, 7 is 1, and 8 is 2.\n    \"\"\"\n    chips: int\n    \"\"\"\n    The number of chips on this board.\n    \"\"\"\n    cores: int\n    \"\"\"\n    The total number of cores across all chips.\n    \"\"\"\n    driver: str\n    \"\"\"\n    The driver being used for this board.\n    This value should be the same as the name of the mining process, for CGMiner this would be set to `\"cgminer\"`\n    \"\"\"\n    model: str\n    \"\"\"\n    The model of the device this board is attached to.\n    This value must match the `type` value of the [version command][nimbus.responses.version.NimbusVersionResult].\n    \"\"\"\n    working_chips: int\n    \"\"\"\n    The number of working chips on this board.\n    \"\"\"\n    expected_hashrate: float\n    \"\"\"\n    The expected hashrate of the board.\n    \"\"\"\n    serial_number: str | None = None\n    \"\"\"\n    The serial number of the board if applicable.\n    \"\"\"\n    voltage: float\n    \"\"\"\n    The voltage of the board, in volts.\n    \"\"\"\n    frequency: float\n    \"\"\"\n    The clock speed of the board, in MHz.\n    \"\"\"\n    wattage: int\n    \"\"\"\n    The total power draw of the board in watts.\n    \"\"\"\n    wattage_limit: int\n    \"\"\"\n    The maximum power draw of the board.\n    \"\"\"\n    hashrate_1m: NimbusHashrate\n    \"\"\"\n    The average hashrate of the board since 1 minute ago.\n    This should be used as the \"real hashrate\" of the board by the end user.\n    \"\"\"\n    hashrate_5m: NimbusHashrate\n    \"\"\"\n    The average hashrate of the board since 5 minutes ago.\n    \"\"\"\n    hashrate_15m: NimbusHashrate\n    \"\"\"\n    The average hashrate of the board since 15 minutes ago.\n    \"\"\"\n    active: bool\n    \"\"\"\n    Whether the board is active.\n    \"\"\"\n    pcb_temperature: float = Field(\n        serialization_alias=\"PCB Temperature\",\n        validation_alias=AliasChoices(\"pcb_temperature\", \"PCB Temperature\"),\n    )\n    \"\"\"\n    The PCB temperature of the board.\n    \"\"\"\n    intake_temperature: float\n    \"\"\"\n    The intake temperature of the board.\n    This is usually sourced from the first sensor on the board.\n    \"\"\"\n    outlet_temperature: float\n    \"\"\"\n    The outlet temperature of the board.\n    This is usually sourced from the last sensor on the board.\n    \"\"\"\n    tuned: bool\n    \"\"\"\n    Whether this board is fully tuned.\n    The meaning of this field is very implementation specific, but should be used to indicate that the board is currently at \"nominal\".\n    \"\"\"\n</code></pre>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.active","title":"active  <code>pydantic-field</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether the board is active.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.chips","title":"chips  <code>pydantic-field</code>","text":"<pre><code>chips: int\n</code></pre> <p>The number of chips on this board.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.cores","title":"cores  <code>pydantic-field</code>","text":"<pre><code>cores: int\n</code></pre> <p>The total number of cores across all chips.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.driver","title":"driver  <code>pydantic-field</code>","text":"<pre><code>driver: str\n</code></pre> <p>The driver being used for this board. This value should be the same as the name of the mining process, for CGMiner this would be set to <code>\"cgminer\"</code></p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.expected_hashrate","title":"expected_hashrate  <code>pydantic-field</code>","text":"<pre><code>expected_hashrate: float\n</code></pre> <p>The expected hashrate of the board.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.frequency","title":"frequency  <code>pydantic-field</code>","text":"<pre><code>frequency: float\n</code></pre> <p>The clock speed of the board, in MHz.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.hashrate_15m","title":"hashrate_15m  <code>pydantic-field</code>","text":"<pre><code>hashrate_15m: NimbusHashrate\n</code></pre> <p>The average hashrate of the board since 15 minutes ago.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.hashrate_1m","title":"hashrate_1m  <code>pydantic-field</code>","text":"<pre><code>hashrate_1m: NimbusHashrate\n</code></pre> <p>The average hashrate of the board since 1 minute ago. This should be used as the \"real hashrate\" of the board by the end user.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.hashrate_5m","title":"hashrate_5m  <code>pydantic-field</code>","text":"<pre><code>hashrate_5m: NimbusHashrate\n</code></pre> <p>The average hashrate of the board since 5 minutes ago.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre> <p>The board ID, indexed from 0. For example, for an S9 with connectors labeled 6/7/8, 6 is 0, 7 is 1, and 8 is 2.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.intake_temperature","title":"intake_temperature  <code>pydantic-field</code>","text":"<pre><code>intake_temperature: float\n</code></pre> <p>The intake temperature of the board. This is usually sourced from the first sensor on the board.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.model","title":"model  <code>pydantic-field</code>","text":"<pre><code>model: str\n</code></pre> <p>The model of the device this board is attached to. This value must match the <code>type</code> value of the version command.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.outlet_temperature","title":"outlet_temperature  <code>pydantic-field</code>","text":"<pre><code>outlet_temperature: float\n</code></pre> <p>The outlet temperature of the board. This is usually sourced from the last sensor on the board.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.pcb_temperature","title":"pcb_temperature  <code>pydantic-field</code>","text":"<pre><code>pcb_temperature: float\n</code></pre> <p>The PCB temperature of the board.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.serial_number","title":"serial_number  <code>pydantic-field</code>","text":"<pre><code>serial_number: str | None = None\n</code></pre> <p>The serial number of the board if applicable.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.tuned","title":"tuned  <code>pydantic-field</code>","text":"<pre><code>tuned: bool\n</code></pre> <p>Whether this board is fully tuned. The meaning of this field is very implementation specific, but should be used to indicate that the board is currently at \"nominal\".</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.voltage","title":"voltage  <code>pydantic-field</code>","text":"<pre><code>voltage: float\n</code></pre> <p>The voltage of the board, in volts.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.wattage","title":"wattage  <code>pydantic-field</code>","text":"<pre><code>wattage: int\n</code></pre> <p>The total power draw of the board in watts.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.wattage_limit","title":"wattage_limit  <code>pydantic-field</code>","text":"<pre><code>wattage_limit: int\n</code></pre> <p>The maximum power draw of the board.</p>"},{"location":"push/data/#nimbus.push.data.hashboards.NimbusPushHashboards.working_chips","title":"working_chips  <code>pydantic-field</code>","text":"<pre><code>working_chips: int\n</code></pre> <p>The number of working chips on this board.</p>"},{"location":"push/data/#nimbus.push.data.hashrate.NimbusHashrate","title":"NimbusHashrate  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NimbusHashrateUnit\": {\n      \"enum\": [\n        1,\n        1000,\n        1000000,\n        1000000000,\n        1000000000000,\n        1000000000000000,\n        1000000000000000000,\n        1000000000000000000000,\n        1\n      ],\n      \"title\": \"NimbusHashrateUnit\",\n      \"type\": \"integer\"\n    }\n  },\n  \"properties\": {\n    \"rate\": {\n      \"default\": 0,\n      \"title\": \"Rate\",\n      \"type\": \"number\"\n    },\n    \"unit\": {\n      \"$ref\": \"#/$defs/NimbusHashrateUnit\",\n      \"default\": 1\n    }\n  },\n  \"title\": \"NimbusHashrate\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>rate</code>                 (<code>float</code>)             </li> <li> <code>unit</code>                 (<code>NimbusHashrateUnit</code>)             </li> </ul> Source code in <code>nimbus/push/data/hashrate.py</code> <pre><code>class NimbusHashrate(BaseModel):\n    rate: float = 0\n    unit: NimbusHashrateUnit = NimbusHashrateUnit.H\n\n    def into(self, other: NimbusHashrateUnit):\n        return self.__class__(rate=self.rate / (other.value / self.unit.value), unit=other)\n</code></pre>"},{"location":"push/data/#nimbus.push.data.hashrate.NimbusHashrateUnit","title":"NimbusHashrateUnit","text":"<p>               Bases: <code>IntEnum</code></p> Source code in <code>nimbus/push/data/hashrate.py</code> <pre><code>class NimbusHashrateUnit(IntEnum):\n    H = 1\n    KH = int(H) * 1000\n    MH = int(KH) * 1000\n    GH = int(MH) * 1000\n    TH = int(GH) * 1000\n    PH = int(TH) * 1000\n    EH = int(PH) * 1000\n    ZH = int(EH) * 1000\n    default = H\n\n    def __str__(self):\n        if self.value == self.H:\n            return \"H/s\"\n        if self.value == self.KH:\n            return \"KH/s\"\n        if self.value == self.MH:\n            return \"MH/s\"\n        if self.value == self.GH:\n            return \"GH/s\"\n        if self.value == self.TH:\n            return \"TH/s\"\n        if self.value == self.PH:\n            return \"PH/s\"\n        if self.value == self.EH:\n            return \"EH/s\"\n        if self.value == self.ZH:\n            return \"ZH/s\"\n        return \"\"\n\n    @classmethod\n    def from_str(cls, value: str):\n        if value == \"H\":\n            return cls.H\n        elif value == \"KH\":\n            return cls.KH\n        elif value == \"MH\":\n            return cls.MH\n        elif value == \"GH\":\n            return cls.GH\n        elif value == \"TH\":\n            return cls.TH\n        elif value == \"PH\":\n            return cls.PH\n        elif value == \"EH\":\n            return cls.EH\n        elif value == \"ZH\":\n            return cls.ZH\n        return cls.default\n\n    def __repr__(self):\n        return str(self)\n\n    def model_dump(self):\n        return {\"value\": self.value, \"suffix\": str(self)}\n</code></pre>"}]}